<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1333"><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.08%)</title><rect x="0.0000%" y="517" width="0.0750%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.08%)</title><rect x="0.0750%" y="517" width="0.0750%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3250%" y="527.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.53%)</title><rect x="0.3001%" y="213" width="0.5251%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="7"/><text x="0.5501%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="0.7502%" y="197" width="0.0750%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="1.0002%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (18 samples, 1.35%)</title><rect x="0.1500%" y="245" width="1.3503%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="18"/><text x="0.4000%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (18 samples, 1.35%)</title><rect x="0.1500%" y="229" width="1.3503%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="18"/><text x="0.4000%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (9 samples, 0.68%)</title><rect x="0.8252%" y="213" width="0.6752%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="9"/><text x="1.0752%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (5 samples, 0.38%)</title><rect x="1.1253%" y="197" width="0.3751%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="5"/><text x="1.3753%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.08%)</title><rect x="1.4254%" y="181" width="0.0750%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="1"/><text x="1.6754%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (7 samples, 0.53%)</title><rect x="1.6504%" y="181" width="0.5251%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="7"/><text x="1.9004%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.98%)</title><rect x="1.6504%" y="197" width="0.9752%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="13"/><text x="1.9004%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (6 samples, 0.45%)</title><rect x="2.1755%" y="181" width="0.4501%" height="15" fill="rgb(240,193,28)" fg:x="29" fg:w="6"/><text x="2.4255%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.08%)</title><rect x="3.0008%" y="181" width="0.0750%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="1"/><text x="3.2508%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (14 samples, 1.05%)</title><rect x="2.6257%" y="197" width="1.0503%" height="15" fill="rgb(206,188,39)" fg:x="35" fg:w="14"/><text x="2.8757%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (8 samples, 0.60%)</title><rect x="3.0758%" y="181" width="0.6002%" height="15" fill="rgb(217,207,13)" fg:x="41" fg:w="8"/><text x="3.3258%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (2 samples, 0.15%)</title><rect x="3.5259%" y="165" width="0.1500%" height="15" fill="rgb(231,73,38)" fg:x="47" fg:w="2"/><text x="3.7759%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (48 samples, 3.60%)</title><rect x="0.1500%" y="261" width="3.6009%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="48"/><text x="0.4000%" y="271.50">spee..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (30 samples, 2.25%)</title><rect x="1.5004%" y="245" width="2.2506%" height="15" fill="rgb(210,31,41)" fg:x="20" fg:w="30"/><text x="1.7504%" y="255.50">s..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (30 samples, 2.25%)</title><rect x="1.5004%" y="229" width="2.2506%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="30"/><text x="1.7504%" y="239.50">s..</text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (30 samples, 2.25%)</title><rect x="1.5004%" y="213" width="2.2506%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="30"/><text x="1.7504%" y="223.50">s..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="3.6759%" y="197" width="0.0750%" height="15" fill="rgb(249,33,26)" fg:x="49" fg:w="1"/><text x="3.9259%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_linear::_{{closure}} (49 samples, 3.68%)</title><rect x="0.1500%" y="357" width="3.6759%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="49"/><text x="0.4000%" y="367.50">spee..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_linear (49 samples, 3.68%)</title><rect x="0.1500%" y="341" width="3.6759%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="49"/><text x="0.4000%" y="351.50">spee..</text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (49 samples, 3.68%)</title><rect x="0.1500%" y="325" width="3.6759%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="49"/><text x="0.4000%" y="335.50">spee..</text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (49 samples, 3.68%)</title><rect x="0.1500%" y="309" width="3.6759%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="49"/><text x="0.4000%" y="319.50">spee..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_linear::_{{closure}} (49 samples, 3.68%)</title><rect x="0.1500%" y="293" width="3.6759%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="49"/><text x="0.4000%" y="303.50">spee..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (49 samples, 3.68%)</title><rect x="0.1500%" y="277" width="3.6759%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="49"/><text x="0.4000%" y="287.50">spee..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::our_seq (1 samples, 0.08%)</title><rect x="3.7509%" y="261" width="0.0750%" height="15" fill="rgb(238,160,17)" fg:x="50" fg:w="1"/><text x="4.0009%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.08%)</title><rect x="3.7509%" y="245" width="0.0750%" height="15" fill="rgb(214,148,48)" fg:x="50" fg:w="1"/><text x="4.0009%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.08%)</title><rect x="3.7509%" y="229" width="0.0750%" height="15" fill="rgb(232,36,49)" fg:x="50" fg:w="1"/><text x="4.0009%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.08%)</title><rect x="3.7509%" y="213" width="0.0750%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="1"/><text x="4.0009%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.08%)</title><rect x="3.7509%" y="197" width="0.0750%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="1"/><text x="4.0009%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.7509%" y="181" width="0.0750%" height="15" fill="rgb(213,181,19)" fg:x="50" fg:w="1"/><text x="4.0009%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.7509%" y="165" width="0.0750%" height="15" fill="rgb(254,191,54)" fg:x="50" fg:w="1"/><text x="4.0009%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="3.7509%" y="149" width="0.0750%" height="15" fill="rgb(241,83,37)" fg:x="50" fg:w="1"/><text x="4.0009%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8260%" y="245" width="0.0750%" height="15" fill="rgb(233,36,39)" fg:x="51" fg:w="1"/><text x="4.0760%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.08%)</title><rect x="3.8260%" y="229" width="0.0750%" height="15" fill="rgb(226,3,54)" fg:x="51" fg:w="1"/><text x="4.0760%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.08%)</title><rect x="3.8260%" y="213" width="0.0750%" height="15" fill="rgb(245,192,40)" fg:x="51" fg:w="1"/><text x="4.0760%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.08%)</title><rect x="3.8260%" y="197" width="0.0750%" height="15" fill="rgb(238,167,29)" fg:x="51" fg:w="1"/><text x="4.0760%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.08%)</title><rect x="3.8260%" y="181" width="0.0750%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="1"/><text x="4.0760%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_root::_{{closure}} (2 samples, 0.15%)</title><rect x="3.8260%" y="357" width="0.1500%" height="15" fill="rgb(231,60,39)" fg:x="51" fg:w="2"/><text x="4.0760%" y="367.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_root (2 samples, 0.15%)</title><rect x="3.8260%" y="341" width="0.1500%" height="15" fill="rgb(208,69,12)" fg:x="51" fg:w="2"/><text x="4.0760%" y="351.50"></text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (2 samples, 0.15%)</title><rect x="3.8260%" y="325" width="0.1500%" height="15" fill="rgb(235,93,37)" fg:x="51" fg:w="2"/><text x="4.0760%" y="335.50"></text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (2 samples, 0.15%)</title><rect x="3.8260%" y="309" width="0.1500%" height="15" fill="rgb(213,116,39)" fg:x="51" fg:w="2"/><text x="4.0760%" y="319.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_1_000_root::_{{closure}} (2 samples, 0.15%)</title><rect x="3.8260%" y="293" width="0.1500%" height="15" fill="rgb(222,207,29)" fg:x="51" fg:w="2"/><text x="4.0760%" y="303.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (2 samples, 0.15%)</title><rect x="3.8260%" y="277" width="0.1500%" height="15" fill="rgb(206,96,30)" fg:x="51" fg:w="2"/><text x="4.0760%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (2 samples, 0.15%)</title><rect x="3.8260%" y="261" width="0.1500%" height="15" fill="rgb(218,138,4)" fg:x="51" fg:w="2"/><text x="4.0760%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1 samples, 0.08%)</title><rect x="3.9010%" y="245" width="0.0750%" height="15" fill="rgb(250,191,14)" fg:x="52" fg:w="1"/><text x="4.1510%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="3.9010%" y="229" width="0.0750%" height="15" fill="rgb(239,60,40)" fg:x="52" fg:w="1"/><text x="4.1510%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::borrow::DormantMutRef&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="3.9010%" y="213" width="0.0750%" height="15" fill="rgb(206,27,48)" fg:x="52" fg:w="1"/><text x="4.1510%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (1 samples, 0.08%)</title><rect x="3.9760%" y="277" width="0.0750%" height="15" fill="rgb(225,35,8)" fg:x="53" fg:w="1"/><text x="4.2260%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`rand::seq::gen_index (1 samples, 0.08%)</title><rect x="3.9760%" y="261" width="0.0750%" height="15" fill="rgb(250,213,24)" fg:x="53" fg:w="1"/><text x="4.2260%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`rand::rng::Rng::gen_range (1 samples, 0.08%)</title><rect x="3.9760%" y="245" width="0.0750%" height="15" fill="rgb(247,123,22)" fg:x="53" fg:w="1"/><text x="4.2260%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1 samples, 0.08%)</title><rect x="3.9760%" y="229" width="0.0750%" height="15" fill="rgb(231,138,38)" fg:x="53" fg:w="1"/><text x="4.2260%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1 samples, 0.08%)</title><rect x="3.9760%" y="213" width="0.0750%" height="15" fill="rgb(231,145,46)" fg:x="53" fg:w="1"/><text x="4.2260%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (1 samples, 0.08%)</title><rect x="3.9760%" y="197" width="0.0750%" height="15" fill="rgb(251,118,11)" fg:x="53" fg:w="1"/><text x="4.2260%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`rand::rng::Rng::gen (1 samples, 0.08%)</title><rect x="3.9760%" y="181" width="0.0750%" height="15" fill="rgb(217,147,25)" fg:x="53" fg:w="1"/><text x="4.2260%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`rand::distributions::integer::_&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.08%)</title><rect x="3.9760%" y="165" width="0.0750%" height="15" fill="rgb(247,81,37)" fg:x="53" fg:w="1"/><text x="4.2260%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.08%)</title><rect x="3.9760%" y="149" width="0.0750%" height="15" fill="rgb(209,12,38)" fg:x="53" fg:w="1"/><text x="4.2260%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.08%)</title><rect x="3.9760%" y="133" width="0.0750%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="1"/><text x="4.2260%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.08%)</title><rect x="3.9760%" y="117" width="0.0750%" height="15" fill="rgb(248,47,43)" fg:x="53" fg:w="1"/><text x="4.2260%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.08%)</title><rect x="3.9760%" y="101" width="0.0750%" height="15" fill="rgb(221,10,30)" fg:x="53" fg:w="1"/><text x="4.2260%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.9760%" y="85" width="0.0750%" height="15" fill="rgb(210,229,1)" fg:x="53" fg:w="1"/><text x="4.2260%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="3.9760%" y="69" width="0.0750%" height="15" fill="rgb(222,148,37)" fg:x="53" fg:w="1"/><text x="4.2260%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="3.9760%" y="53" width="0.0750%" height="15" fill="rgb(234,67,33)" fg:x="53" fg:w="1"/><text x="4.2260%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.0510%" y="277" width="0.0750%" height="15" fill="rgb(247,98,35)" fg:x="54" fg:w="1"/><text x="4.3010%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="4.0510%" y="261" width="0.0750%" height="15" fill="rgb(247,138,52)" fg:x="54" fg:w="1"/><text x="4.3010%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.1260%" y="277" width="0.0750%" height="15" fill="rgb(213,79,30)" fg:x="55" fg:w="1"/><text x="4.3760%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="4.1260%" y="261" width="0.0750%" height="15" fill="rgb(246,177,23)" fg:x="55" fg:w="1"/><text x="4.3760%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="4.1260%" y="245" width="0.0750%" height="15" fill="rgb(230,62,27)" fg:x="55" fg:w="1"/><text x="4.3760%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.23%)</title><rect x="4.2761%" y="261" width="0.2251%" height="15" fill="rgb(216,154,8)" fg:x="57" fg:w="3"/><text x="4.5261%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.08%)</title><rect x="4.5011%" y="229" width="0.0750%" height="15" fill="rgb(244,35,45)" fg:x="60" fg:w="1"/><text x="4.7511%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.08%)</title><rect x="4.6512%" y="213" width="0.0750%" height="15" fill="rgb(251,115,12)" fg:x="62" fg:w="1"/><text x="4.9012%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.08%)</title><rect x="4.6512%" y="197" width="0.0750%" height="15" fill="rgb(240,54,50)" fg:x="62" fg:w="1"/><text x="4.9012%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="4.8762%" y="197" width="0.1500%" height="15" fill="rgb(233,84,52)" fg:x="65" fg:w="2"/><text x="5.1262%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::new_kv (1 samples, 0.08%)</title><rect x="5.0263%" y="197" width="0.0750%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="1"/><text x="5.2763%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (10 samples, 0.75%)</title><rect x="7.4269%" y="149" width="0.7502%" height="15" fill="rgb(249,43,39)" fg:x="99" fg:w="10"/><text x="7.6769%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 2.25%)</title><rect x="6.9017%" y="165" width="2.2506%" height="15" fill="rgb(209,38,44)" fg:x="92" fg:w="30"/><text x="7.1517%" y="175.50">s..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (13 samples, 0.98%)</title><rect x="8.1770%" y="149" width="0.9752%" height="15" fill="rgb(236,212,23)" fg:x="109" fg:w="13"/><text x="8.4270%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (6 samples, 0.45%)</title><rect x="8.7022%" y="133" width="0.4501%" height="15" fill="rgb(242,79,21)" fg:x="116" fg:w="6"/><text x="8.9522%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 2.85%)</title><rect x="6.3766%" y="181" width="2.8507%" height="15" fill="rgb(211,96,35)" fg:x="85" fg:w="38"/><text x="6.6266%" y="191.50">sp..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="9.1523%" y="165" width="0.0750%" height="15" fill="rgb(253,215,40)" fg:x="122" fg:w="1"/><text x="9.4023%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.08%)</title><rect x="9.2273%" y="181" width="0.0750%" height="15" fill="rgb(211,81,21)" fg:x="123" fg:w="1"/><text x="9.4773%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.08%)</title><rect x="10.0525%" y="165" width="0.0750%" height="15" fill="rgb(208,190,38)" fg:x="134" fg:w="1"/><text x="10.3025%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (13 samples, 0.98%)</title><rect x="9.3023%" y="181" width="0.9752%" height="15" fill="rgb(235,213,38)" fg:x="124" fg:w="13"/><text x="9.5523%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_leaf (2 samples, 0.15%)</title><rect x="10.1275%" y="165" width="0.1500%" height="15" fill="rgb(237,122,38)" fg:x="135" fg:w="2"/><text x="10.3775%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf_ptr (1 samples, 0.08%)</title><rect x="10.2026%" y="149" width="0.0750%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="1"/><text x="10.4526%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (6 samples, 0.45%)</title><rect x="10.2776%" y="181" width="0.4501%" height="15" fill="rgb(240,68,47)" fg:x="137" fg:w="6"/><text x="10.5276%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (84 samples, 6.30%)</title><rect x="4.5011%" y="245" width="6.3016%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="84"/><text x="4.7511%" y="255.50">speed-20..</text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (83 samples, 6.23%)</title><rect x="4.5761%" y="229" width="6.2266%" height="15" fill="rgb(235,124,12)" fg:x="61" fg:w="83"/><text x="4.8261%" y="239.50">speed-20..</text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (81 samples, 6.08%)</title><rect x="4.7262%" y="213" width="6.0765%" height="15" fill="rgb(224,169,11)" fg:x="63" fg:w="81"/><text x="4.9762%" y="223.50">speed-20..</text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (76 samples, 5.70%)</title><rect x="5.1013%" y="197" width="5.7014%" height="15" fill="rgb(250,166,2)" fg:x="68" fg:w="76"/><text x="5.3513%" y="207.50">speed-2..</text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="10.7277%" y="181" width="0.0750%" height="15" fill="rgb(242,216,29)" fg:x="143" fg:w="1"/><text x="10.9777%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="10.7277%" y="165" width="0.0750%" height="15" fill="rgb(230,116,27)" fg:x="143" fg:w="1"/><text x="10.9777%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::get_mut (4 samples, 0.30%)</title><rect x="10.9527%" y="229" width="0.3001%" height="15" fill="rgb(228,99,48)" fg:x="146" fg:w="4"/><text x="11.2027%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::kv_mut (3 samples, 0.23%)</title><rect x="11.0278%" y="213" width="0.2251%" height="15" fill="rgb(253,11,6)" fg:x="147" fg:w="3"/><text x="11.2778%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::insert (7 samples, 0.53%)</title><rect x="10.8027%" y="245" width="0.5251%" height="15" fill="rgb(247,143,39)" fg:x="144" fg:w="7"/><text x="11.0527%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::mem::replace (1 samples, 0.08%)</title><rect x="11.2528%" y="229" width="0.0750%" height="15" fill="rgb(236,97,10)" fg:x="150" fg:w="1"/><text x="11.5028%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3278%" y="229" width="0.0750%" height="15" fill="rgb(233,208,19)" fg:x="151" fg:w="1"/><text x="11.5778%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (93 samples, 6.98%)</title><rect x="4.5011%" y="261" width="6.9767%" height="15" fill="rgb(216,164,2)" fg:x="60" fg:w="93"/><text x="4.7511%" y="271.50">speed-20c..</text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="11.3278%" y="245" width="0.1500%" height="15" fill="rgb(220,129,5)" fg:x="151" fg:w="2"/><text x="11.5778%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.4029%" y="229" width="0.0750%" height="15" fill="rgb(242,17,10)" fg:x="152" fg:w="1"/><text x="11.6529%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.08%)</title><rect x="11.4029%" y="213" width="0.0750%" height="15" fill="rgb(242,107,0)" fg:x="152" fg:w="1"/><text x="11.6529%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.08%)</title><rect x="11.4029%" y="197" width="0.0750%" height="15" fill="rgb(251,28,31)" fg:x="152" fg:w="1"/><text x="11.6529%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::slice_insert (1 samples, 0.08%)</title><rect x="11.4029%" y="181" width="0.0750%" height="15" fill="rgb(233,223,10)" fg:x="152" fg:w="1"/><text x="11.6529%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="11.4779%" y="261" width="0.0750%" height="15" fill="rgb(215,21,27)" fg:x="153" fg:w="1"/><text x="11.7279%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="11.5529%" y="245" width="0.0750%" height="15" fill="rgb(232,23,21)" fg:x="154" fg:w="1"/><text x="11.8029%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="11.5529%" y="229" width="0.0750%" height="15" fill="rgb(244,5,23)" fg:x="154" fg:w="1"/><text x="11.8029%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4 samples, 0.30%)</title><rect x="11.6279%" y="245" width="0.3001%" height="15" fill="rgb(226,81,46)" fg:x="155" fg:w="4"/><text x="11.8779%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (4 samples, 0.30%)</title><rect x="11.6279%" y="229" width="0.3001%" height="15" fill="rgb(247,70,30)" fg:x="155" fg:w="4"/><text x="11.8779%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (4 samples, 0.30%)</title><rect x="11.6279%" y="213" width="0.3001%" height="15" fill="rgb(212,68,19)" fg:x="155" fg:w="4"/><text x="11.8779%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (4 samples, 0.30%)</title><rect x="11.6279%" y="197" width="0.3001%" height="15" fill="rgb(240,187,13)" fg:x="155" fg:w="4"/><text x="11.8779%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (6 samples, 0.45%)</title><rect x="11.5529%" y="261" width="0.4501%" height="15" fill="rgb(223,113,26)" fg:x="154" fg:w="6"/><text x="11.8029%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (1 samples, 0.08%)</title><rect x="11.9280%" y="245" width="0.0750%" height="15" fill="rgb(206,192,2)" fg:x="159" fg:w="1"/><text x="12.1780%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="11.9280%" y="229" width="0.0750%" height="15" fill="rgb(241,108,4)" fg:x="159" fg:w="1"/><text x="12.1780%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="11.9280%" y="213" width="0.0750%" height="15" fill="rgb(247,173,49)" fg:x="159" fg:w="1"/><text x="12.1780%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.38%)</title><rect x="23.9310%" y="245" width="0.3751%" height="15" fill="rgb(224,114,35)" fg:x="319" fg:w="5"/><text x="24.1810%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (165 samples, 12.38%)</title><rect x="25.6564%" y="229" width="12.3781%" height="15" fill="rgb(245,159,27)" fg:x="342" fg:w="165"/><text x="25.9064%" y="239.50">speed-20cf170cf934..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (139 samples, 10.43%)</title><rect x="27.6069%" y="213" width="10.4276%" height="15" fill="rgb(245,172,44)" fg:x="368" fg:w="139"/><text x="27.8569%" y="223.50">speed-20cf170cf..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (62 samples, 4.65%)</title><rect x="33.3833%" y="197" width="4.6512%" height="15" fill="rgb(236,23,11)" fg:x="445" fg:w="62"/><text x="33.6333%" y="207.50">speed..</text></g><g><title>speed-20cf170cf9340871`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.30%)</title><rect x="38.0345%" y="229" width="0.3001%" height="15" fill="rgb(205,117,38)" fg:x="507" fg:w="4"/><text x="38.2845%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (190 samples, 14.25%)</title><rect x="24.3061%" y="245" width="14.2536%" height="15" fill="rgb(237,72,25)" fg:x="324" fg:w="190"/><text x="24.5561%" y="255.50">speed-20cf170cf9340871..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.23%)</title><rect x="38.3346%" y="229" width="0.2251%" height="15" fill="rgb(244,70,9)" fg:x="511" fg:w="3"/><text x="38.5846%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.23%)</title><rect x="38.5596%" y="245" width="0.2251%" height="15" fill="rgb(217,125,39)" fg:x="514" fg:w="3"/><text x="38.8096%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="38.7847%" y="245" width="0.0750%" height="15" fill="rgb(235,36,10)" fg:x="517" fg:w="1"/><text x="39.0347%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 1.50%)</title><rect x="39.0848%" y="229" width="1.5004%" height="15" fill="rgb(251,123,47)" fg:x="521" fg:w="20"/><text x="39.3348%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::insert (26 samples, 1.95%)</title><rect x="38.8597%" y="245" width="1.9505%" height="15" fill="rgb(221,13,13)" fg:x="518" fg:w="26"/><text x="39.1097%" y="255.50">s..</text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.23%)</title><rect x="40.5851%" y="229" width="0.2251%" height="15" fill="rgb(238,131,9)" fg:x="541" fg:w="3"/><text x="40.8351%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.23%)</title><rect x="40.5851%" y="213" width="0.2251%" height="15" fill="rgb(211,50,8)" fg:x="541" fg:w="3"/><text x="40.8351%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="40.5851%" y="197" width="0.2251%" height="15" fill="rgb(245,182,24)" fg:x="541" fg:w="3"/><text x="40.8351%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.23%)</title><rect x="40.5851%" y="181" width="0.2251%" height="15" fill="rgb(242,14,37)" fg:x="541" fg:w="3"/><text x="40.8351%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="40.5851%" y="165" width="0.2251%" height="15" fill="rgb(246,228,12)" fg:x="541" fg:w="3"/><text x="40.8351%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.23%)</title><rect x="40.5851%" y="149" width="0.2251%" height="15" fill="rgb(213,55,15)" fg:x="541" fg:w="3"/><text x="40.8351%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`alloc::alloc::Global::grow_impl (3 samples, 0.23%)</title><rect x="40.5851%" y="133" width="0.2251%" height="15" fill="rgb(209,9,3)" fg:x="541" fg:w="3"/><text x="40.8351%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.23%)</title><rect x="40.5851%" y="117" width="0.2251%" height="15" fill="rgb(230,59,30)" fg:x="541" fg:w="3"/><text x="40.8351%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.23%)</title><rect x="40.5851%" y="101" width="0.2251%" height="15" fill="rgb(209,121,21)" fg:x="541" fg:w="3"/><text x="40.8351%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.23%)</title><rect x="40.5851%" y="85" width="0.2251%" height="15" fill="rgb(220,109,13)" fg:x="541" fg:w="3"/><text x="40.8351%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.23%)</title><rect x="40.5851%" y="69" width="0.2251%" height="15" fill="rgb(232,18,1)" fg:x="541" fg:w="3"/><text x="40.8351%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.45%)</title><rect x="40.8102%" y="245" width="0.4501%" height="15" fill="rgb(215,41,42)" fg:x="544" fg:w="6"/><text x="41.0602%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="45.9115%" y="213" width="0.0750%" height="15" fill="rgb(224,123,36)" fg:x="612" fg:w="1"/><text x="46.1615%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (110 samples, 8.25%)</title><rect x="42.8357%" y="229" width="8.2521%" height="15" fill="rgb(240,125,3)" fg:x="571" fg:w="110"/><text x="43.0857%" y="239.50">speed-20cf1..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (68 samples, 5.10%)</title><rect x="45.9865%" y="213" width="5.1013%" height="15" fill="rgb(205,98,50)" fg:x="613" fg:w="68"/><text x="46.2365%" y="223.50">speed-..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (31 samples, 2.33%)</title><rect x="48.7622%" y="197" width="2.3256%" height="15" fill="rgb(205,185,37)" fg:x="650" fg:w="31"/><text x="49.0122%" y="207.50">s..</text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="51.0878%" y="229" width="0.0750%" height="15" fill="rgb(238,207,15)" fg:x="681" fg:w="1"/><text x="51.3378%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (66 samples, 4.95%)</title><rect x="58.7397%" y="197" width="4.9512%" height="15" fill="rgb(213,199,42)" fg:x="783" fg:w="66"/><text x="58.9897%" y="207.50">speed-..</text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (203 samples, 15.23%)</title><rect x="56.0390%" y="213" width="15.2288%" height="15" fill="rgb(235,201,11)" fg:x="747" fg:w="203"/><text x="56.2890%" y="223.50">speed-20cf170cf9340871`..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (101 samples, 7.58%)</title><rect x="63.6909%" y="197" width="7.5769%" height="15" fill="rgb(207,46,11)" fg:x="849" fg:w="101"/><text x="63.9409%" y="207.50">speed-20cf..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (53 samples, 3.98%)</title><rect x="67.2918%" y="181" width="3.9760%" height="15" fill="rgb(241,35,35)" fg:x="897" fg:w="53"/><text x="67.5418%" y="191.50">spee..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (2 samples, 0.15%)</title><rect x="72.9932%" y="197" width="0.1500%" height="15" fill="rgb(243,32,47)" fg:x="973" fg:w="2"/><text x="73.2432%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (123 samples, 9.23%)</title><rect x="71.2678%" y="213" width="9.2273%" height="15" fill="rgb(247,202,23)" fg:x="950" fg:w="123"/><text x="71.5178%" y="223.50">speed-20cf170..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (98 samples, 7.35%)</title><rect x="73.1433%" y="197" width="7.3518%" height="15" fill="rgb(219,102,11)" fg:x="975" fg:w="98"/><text x="73.3933%" y="207.50">speed-20cf..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (37 samples, 2.78%)</title><rect x="77.7194%" y="181" width="2.7757%" height="15" fill="rgb(243,110,44)" fg:x="1036" fg:w="37"/><text x="77.9694%" y="191.50">sp..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (2 samples, 0.15%)</title><rect x="80.4951%" y="213" width="0.1500%" height="15" fill="rgb(222,74,54)" fg:x="1073" fg:w="2"/><text x="80.7451%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (398 samples, 29.86%)</title><rect x="51.1628%" y="229" width="29.8575%" height="15" fill="rgb(216,99,12)" fg:x="682" fg:w="398"/><text x="51.4128%" y="239.50">speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (5 samples, 0.38%)</title><rect x="80.6452%" y="213" width="0.3751%" height="15" fill="rgb(226,22,26)" fg:x="1075" fg:w="5"/><text x="80.8952%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (2 samples, 0.15%)</title><rect x="81.0203%" y="229" width="0.1500%" height="15" fill="rgb(217,163,10)" fg:x="1080" fg:w="2"/><text x="81.2703%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (5 samples, 0.38%)</title><rect x="81.1703%" y="229" width="0.3751%" height="15" fill="rgb(213,25,53)" fg:x="1082" fg:w="5"/><text x="81.4203%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (2 samples, 0.15%)</title><rect x="81.6954%" y="213" width="0.1500%" height="15" fill="rgb(252,105,26)" fg:x="1089" fg:w="2"/><text x="81.9454%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (139 samples, 10.43%)</title><rect x="81.5454%" y="229" width="10.4276%" height="15" fill="rgb(220,39,43)" fg:x="1087" fg:w="139"/><text x="81.7954%" y="239.50">speed-20cf170cf..</text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (135 samples, 10.13%)</title><rect x="81.8455%" y="213" width="10.1275%" height="15" fill="rgb(229,68,48)" fg:x="1091" fg:w="135"/><text x="82.0955%" y="223.50">speed-20cf170cf..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (110 samples, 8.25%)</title><rect x="83.7209%" y="197" width="8.2521%" height="15" fill="rgb(252,8,32)" fg:x="1116" fg:w="110"/><text x="83.9709%" y="207.50">speed-20cf1..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (681 samples, 51.09%)</title><rect x="41.2603%" y="245" width="51.0878%" height="15" fill="rgb(223,20,43)" fg:x="550" fg:w="681"/><text x="41.5103%" y="255.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find</text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.38%)</title><rect x="91.9730%" y="229" width="0.3751%" height="15" fill="rgb(229,81,49)" fg:x="1226" fg:w="5"/><text x="92.2230%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::author (1 samples, 0.08%)</title><rect x="92.3481%" y="245" width="0.0750%" height="15" fill="rgb(236,28,36)" fg:x="1231" fg:w="1"/><text x="92.5981%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (17 samples, 1.28%)</title><rect x="92.4231%" y="245" width="1.2753%" height="15" fill="rgb(249,185,26)" fg:x="1232" fg:w="17"/><text x="92.6731%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (5 samples, 0.38%)</title><rect x="93.6984%" y="245" width="0.3751%" height="15" fill="rgb(249,174,33)" fg:x="1249" fg:w="5"/><text x="93.9484%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (8 samples, 0.60%)</title><rect x="94.0735%" y="245" width="0.6002%" height="15" fill="rgb(233,201,37)" fg:x="1254" fg:w="8"/><text x="94.3235%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::unwrap (6 samples, 0.45%)</title><rect x="94.6737%" y="245" width="0.4501%" height="15" fill="rgb(221,78,26)" fg:x="1262" fg:w="6"/><text x="94.9237%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (3 samples, 0.23%)</title><rect x="95.1238%" y="245" width="0.2251%" height="15" fill="rgb(250,127,30)" fg:x="1268" fg:w="3"/><text x="95.3738%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (1,132 samples, 84.92%)</title><rect x="12.0030%" y="261" width="84.9212%" height="15" fill="rgb(230,49,44)" fg:x="160" fg:w="1132"/><text x="12.2530%" y="271.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (21 samples, 1.58%)</title><rect x="95.3488%" y="245" width="1.5754%" height="15" fill="rgb(229,67,23)" fg:x="1271" fg:w="21"/><text x="95.5988%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (9 samples, 0.68%)</title><rect x="96.2491%" y="229" width="0.6752%" height="15" fill="rgb(249,83,47)" fg:x="1283" fg:w="9"/><text x="96.4991%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (5 samples, 0.38%)</title><rect x="96.9242%" y="261" width="0.3751%" height="15" fill="rgb(215,43,3)" fg:x="1292" fg:w="5"/><text x="97.1742%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.08%)</title><rect x="97.2993%" y="261" width="0.0750%" height="15" fill="rgb(238,154,13)" fg:x="1297" fg:w="1"/><text x="97.5493%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (6 samples, 0.45%)</title><rect x="97.3743%" y="261" width="0.4501%" height="15" fill="rgb(219,56,2)" fg:x="1298" fg:w="6"/><text x="97.6243%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::max (1 samples, 0.08%)</title><rect x="97.8245%" y="261" width="0.0750%" height="15" fill="rgb(233,0,4)" fg:x="1304" fg:w="1"/><text x="98.0745%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="97.8245%" y="245" width="0.0750%" height="15" fill="rgb(235,30,7)" fg:x="1304" fg:w="1"/><text x="98.0745%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::unwrap (10 samples, 0.75%)</title><rect x="97.8995%" y="261" width="0.7502%" height="15" fill="rgb(250,79,13)" fg:x="1305" fg:w="10"/><text x="98.1495%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (1,262 samples, 94.67%)</title><rect x="4.2011%" y="277" width="94.6737%" height="15" fill="rgb(211,146,34)" fg:x="56" fg:w="1262"/><text x="4.4511%" y="287.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3 samples, 0.23%)</title><rect x="98.6497%" y="261" width="0.2251%" height="15" fill="rgb(228,22,38)" fg:x="1315" fg:w="3"/><text x="98.8997%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (1 samples, 0.08%)</title><rect x="98.8747%" y="277" width="0.0750%" height="15" fill="rgb(235,168,5)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (1 samples, 0.08%)</title><rect x="98.8747%" y="261" width="0.0750%" height="15" fill="rgb(221,155,16)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8747%" y="245" width="0.0750%" height="15" fill="rgb(215,215,53)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.08%)</title><rect x="98.8747%" y="229" width="0.0750%" height="15" fill="rgb(223,4,10)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.08%)</title><rect x="98.8747%" y="213" width="0.0750%" height="15" fill="rgb(234,103,6)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.08%)</title><rect x="98.8747%" y="197" width="0.0750%" height="15" fill="rgb(227,97,0)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.08%)</title><rect x="98.8747%" y="181" width="0.0750%" height="15" fill="rgb(234,150,53)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.08%)</title><rect x="98.8747%" y="165" width="0.0750%" height="15" fill="rgb(228,201,54)" fg:x="1318" fg:w="1"/><text x="99.1247%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9497%" y="149" width="0.0750%" height="15" fill="rgb(222,22,37)" fg:x="1319" fg:w="1"/><text x="99.1997%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.08%)</title><rect x="98.9497%" y="133" width="0.0750%" height="15" fill="rgb(237,53,32)" fg:x="1319" fg:w="1"/><text x="99.1997%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.15%)</title><rect x="98.9497%" y="213" width="0.1500%" height="15" fill="rgb(233,25,53)" fg:x="1319" fg:w="2"/><text x="99.1997%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.15%)</title><rect x="98.9497%" y="197" width="0.1500%" height="15" fill="rgb(210,40,34)" fg:x="1319" fg:w="2"/><text x="99.1997%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.15%)</title><rect x="98.9497%" y="181" width="0.1500%" height="15" fill="rgb(241,220,44)" fg:x="1319" fg:w="2"/><text x="99.1997%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.15%)</title><rect x="98.9497%" y="165" width="0.1500%" height="15" fill="rgb(235,28,35)" fg:x="1319" fg:w="2"/><text x="99.1997%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.08%)</title><rect x="99.0248%" y="149" width="0.0750%" height="15" fill="rgb(210,56,17)" fg:x="1320" fg:w="1"/><text x="99.2748%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (1 samples, 0.08%)</title><rect x="99.0248%" y="133" width="0.0750%" height="15" fill="rgb(224,130,29)" fg:x="1320" fg:w="1"/><text x="99.2748%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.08%)</title><rect x="99.0248%" y="117" width="0.0750%" height="15" fill="rgb(235,212,8)" fg:x="1320" fg:w="1"/><text x="99.2748%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="99.1748%" y="53" width="0.2251%" height="15" fill="rgb(223,33,50)" fg:x="1322" fg:w="3"/><text x="99.4248%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="99.3248%" y="37" width="0.0750%" height="15" fill="rgb(219,149,13)" fg:x="1324" fg:w="1"/><text x="99.5748%" y="47.50"></text></g><g><title>speed-20cf170cf9340871`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.15%)</title><rect x="99.3998%" y="53" width="0.1500%" height="15" fill="rgb(250,156,29)" fg:x="1325" fg:w="2"/><text x="99.6498%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::iter::_{{closure}} (2 samples, 0.15%)</title><rect x="99.3998%" y="37" width="0.1500%" height="15" fill="rgb(216,193,19)" fg:x="1325" fg:w="2"/><text x="99.6498%" y="47.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.53%)</title><rect x="99.0998%" y="101" width="0.5251%" height="15" fill="rgb(216,135,14)" fg:x="1321" fg:w="7"/><text x="99.3498%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.45%)</title><rect x="99.1748%" y="85" width="0.4501%" height="15" fill="rgb(241,47,5)" fg:x="1322" fg:w="6"/><text x="99.4248%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (6 samples, 0.45%)</title><rect x="99.1748%" y="69" width="0.4501%" height="15" fill="rgb(233,42,35)" fg:x="1322" fg:w="6"/><text x="99.4248%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="99.5499%" y="53" width="0.0750%" height="15" fill="rgb(231,13,6)" fg:x="1327" fg:w="1"/><text x="99.7999%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::all (12 samples, 0.90%)</title><rect x="98.9497%" y="277" width="0.9002%" height="15" fill="rgb(207,181,40)" fg:x="1319" fg:w="12"/><text x="99.1997%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.90%)</title><rect x="98.9497%" y="261" width="0.9002%" height="15" fill="rgb(254,173,49)" fg:x="1319" fg:w="12"/><text x="99.1997%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (12 samples, 0.90%)</title><rect x="98.9497%" y="245" width="0.9002%" height="15" fill="rgb(221,1,38)" fg:x="1319" fg:w="12"/><text x="99.1997%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}}::_{{closure}} (12 samples, 0.90%)</title><rect x="98.9497%" y="229" width="0.9002%" height="15" fill="rgb(206,124,46)" fg:x="1319" fg:w="12"/><text x="99.1997%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::view (10 samples, 0.75%)</title><rect x="99.0998%" y="213" width="0.7502%" height="15" fill="rgb(249,21,11)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::collect (10 samples, 0.75%)</title><rect x="99.0998%" y="197" width="0.7502%" height="15" fill="rgb(222,201,40)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.75%)</title><rect x="99.0998%" y="181" width="0.7502%" height="15" fill="rgb(235,61,29)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.75%)</title><rect x="99.0998%" y="165" width="0.7502%" height="15" fill="rgb(219,207,3)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.75%)</title><rect x="99.0998%" y="149" width="0.7502%" height="15" fill="rgb(222,56,46)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.75%)</title><rect x="99.0998%" y="133" width="0.7502%" height="15" fill="rgb(239,76,54)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (10 samples, 0.75%)</title><rect x="99.0998%" y="117" width="0.7502%" height="15" fill="rgb(231,124,27)" fg:x="1321" fg:w="10"/><text x="99.3498%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.23%)</title><rect x="99.6249%" y="101" width="0.2251%" height="15" fill="rgb(249,195,6)" fg:x="1328" fg:w="3"/><text x="99.8749%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="99.7749%" y="85" width="0.0750%" height="15" fill="rgb(237,174,47)" fg:x="1330" fg:w="1"/><text x="100.0249%" y="95.50"></text></g><g><title>all (1,333 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="1333"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,331 samples, 99.85%)</title><rect x="0.1500%" y="517" width="99.8500%" height="15" fill="rgb(231,57,52)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="527.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,331 samples, 99.85%)</title><rect x="0.1500%" y="501" width="99.8500%" height="15" fill="rgb(248,177,22)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="511.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>speed-20cf170cf9340871`std::sys::unix::thread::Thread::new::thread_start (1,331 samples, 99.85%)</title><rect x="0.1500%" y="485" width="99.8500%" height="15" fill="rgb(215,211,37)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="495.50">speed-20cf170cf9340871`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,331 samples, 99.85%)</title><rect x="0.1500%" y="469" width="99.8500%" height="15" fill="rgb(241,128,51)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="479.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-20cf170cf9340871`std::sys_common::backtrace::__rust_begin_short_backtrace (1,331 samples, 99.85%)</title><rect x="0.1500%" y="453" width="99.8500%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="463.50">speed-20cf170cf9340871`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`test::run_test::run_test_inner::_{{closure}} (1,331 samples, 99.85%)</title><rect x="0.1500%" y="437" width="99.8500%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="447.50">speed-20cf170cf9340871`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`test::__rust_begin_short_backtrace (1,331 samples, 99.85%)</title><rect x="0.1500%" y="421" width="99.8500%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="431.50">speed-20cf170cf9340871`test::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,331 samples, 99.85%)</title><rect x="0.1500%" y="405" width="99.8500%" height="15" fill="rgb(249,149,8)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="415.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-20cf170cf9340871`test::__rust_begin_short_backtrace (1,331 samples, 99.85%)</title><rect x="0.1500%" y="389" width="99.8500%" height="15" fill="rgb(243,35,44)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="399.50">speed-20cf170cf9340871`test::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once (1,331 samples, 99.85%)</title><rect x="0.1500%" y="373" width="99.8500%" height="15" fill="rgb(246,89,9)" fg:x="2" fg:w="1331"/><text x="0.4000%" y="383.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}} (1,280 samples, 96.02%)</title><rect x="3.9760%" y="357" width="96.0240%" height="15" fill="rgb(233,213,13)" fg:x="53" fg:w="1280"/><text x="4.2260%" y="367.50">speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts (1,280 samples, 96.02%)</title><rect x="3.9760%" y="341" width="96.0240%" height="15" fill="rgb(233,141,41)" fg:x="53" fg:w="1280"/><text x="4.2260%" y="351.50">speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts</text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (1,280 samples, 96.02%)</title><rect x="3.9760%" y="325" width="96.0240%" height="15" fill="rgb(239,167,4)" fg:x="53" fg:w="1280"/><text x="4.2260%" y="335.50">speed-20cf170cf9340871`test::bench::Bencher::iter</text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (1,280 samples, 96.02%)</title><rect x="3.9760%" y="309" width="96.0240%" height="15" fill="rgb(209,217,16)" fg:x="53" fg:w="1280"/><text x="4.2260%" y="319.50">speed-20cf170cf9340871`test::bench::ns_iter_inner</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}} (1,280 samples, 96.02%)</title><rect x="3.9760%" y="293" width="96.0240%" height="15" fill="rgb(219,88,35)" fg:x="53" fg:w="1280"/><text x="4.2260%" y="303.50">speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt;&gt; (2 samples, 0.15%)</title><rect x="99.8500%" y="277" width="0.1500%" height="15" fill="rgb(220,193,23)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="99.8500%" y="261" width="0.1500%" height="15" fill="rgb(230,90,52)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;[bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;]&gt; (2 samples, 0.15%)</title><rect x="99.8500%" y="245" width="0.1500%" height="15" fill="rgb(252,106,19)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt; (2 samples, 0.15%)</title><rect x="99.8500%" y="229" width="0.1500%" height="15" fill="rgb(206,74,20)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u64,u64&gt;&gt; (2 samples, 0.15%)</title><rect x="99.8500%" y="213" width="0.1500%" height="15" fill="rgb(230,138,44)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="99.8500%" y="197" width="0.1500%" height="15" fill="rgb(235,182,43)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u64,u64&gt;&gt; (2 samples, 0.15%)</title><rect x="99.8500%" y="181" width="0.1500%" height="15" fill="rgb(242,16,51)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="99.8500%" y="165" width="0.1500%" height="15" fill="rgb(248,9,4)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2 samples, 0.15%)</title><rect x="99.8500%" y="149" width="0.1500%" height="15" fill="rgb(210,31,22)" fg:x="1331" fg:w="2"/><text x="100.1000%" y="159.50"></text></g></svg></svg>