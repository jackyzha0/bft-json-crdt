<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="1040"><g><title>dyld`start (1 samples, 0.10%)</title><rect x="0.0000%" y="693" width="0.0962%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>speed-0b1675bc7d978a4b`main (1 samples, 0.10%)</title><rect x="0.0000%" y="677" width="0.0962%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::rt::lang_start (1 samples, 0.10%)</title><rect x="0.0000%" y="661" width="0.0962%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::rt::lang_start_internal (1 samples, 0.10%)</title><rect x="0.0000%" y="645" width="0.0962%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::rt::lang_start::_{{closure}} (1 samples, 0.10%)</title><rect x="0.0000%" y="629" width="0.0962%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.10%)</title><rect x="0.0000%" y="613" width="0.0962%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once (1 samples, 0.10%)</title><rect x="0.0000%" y="597" width="0.0962%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>speed-0b1675bc7d978a4b`speed::main (1 samples, 0.10%)</title><rect x="0.0000%" y="581" width="0.0962%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::test_main_static (1 samples, 0.10%)</title><rect x="0.0000%" y="565" width="0.0962%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::test_main (1 samples, 0.10%)</title><rect x="0.0000%" y="549" width="0.0962%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::console::run_tests_console (1 samples, 0.10%)</title><rect x="0.0000%" y="533" width="0.0962%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::run_tests (1 samples, 0.10%)</title><rect x="0.0000%" y="517" width="0.0962%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::console::run_tests_console::_{{closure}} (1 samples, 0.10%)</title><rect x="0.0000%" y="501" width="0.0962%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>speed-0b1675bc7d978a4b`test::formatters::pretty::PrettyFormatter&lt;T&gt;::write_pretty (1 samples, 0.10%)</title><rect x="0.0000%" y="485" width="0.0962%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="0.0962%" y="405" width="0.0962%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.3462%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (5 samples, 0.48%)</title><rect x="0.3846%" y="373" width="0.4808%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="5"/><text x="0.6346%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.77%)</title><rect x="0.1923%" y="389" width="0.7692%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="8"/><text x="0.4423%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="0.8654%" y="373" width="0.0962%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="1.1154%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (11 samples, 1.06%)</title><rect x="0.9615%" y="389" width="1.0577%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="11"/><text x="1.2115%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (7 samples, 0.67%)</title><rect x="1.3462%" y="373" width="0.6731%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="7"/><text x="1.5962%" y="383.50"></text></g><g><title> N]&gt; for [A (7 samples, 0.67%)</title><rect x="1.3462%" y="357" width="0.6731%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="7"/><text x="1.5962%" y="367.50"></text></g><g><title> N]&gt;::eq (7 samples, 0.67%)</title><rect x="1.3462%" y="341" width="0.6731%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="7"/><text x="1.5962%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (5 samples, 0.48%)</title><rect x="1.5385%" y="325" width="0.4808%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="5"/><text x="1.7885%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.19%)</title><rect x="1.8269%" y="309" width="0.1923%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="2"/><text x="2.0769%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (21 samples, 2.02%)</title><rect x="0.0962%" y="421" width="2.0192%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="21"/><text x="0.3462%" y="431.50">s..</text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (20 samples, 1.92%)</title><rect x="0.1923%" y="405" width="1.9231%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="20"/><text x="0.4423%" y="415.50">s..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.10%)</title><rect x="2.0192%" y="389" width="0.0962%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="1"/><text x="2.2692%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (3 samples, 0.29%)</title><rect x="2.5000%" y="357" width="0.2885%" height="15" fill="rgb(238,160,17)" fg:x="26" fg:w="3"/><text x="2.7500%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.19%)</title><rect x="2.7885%" y="357" width="0.1923%" height="15" fill="rgb(214,148,48)" fg:x="29" fg:w="2"/><text x="3.0385%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.87%)</title><rect x="2.4038%" y="373" width="0.8654%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="9"/><text x="2.6538%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.29%)</title><rect x="2.9808%" y="357" width="0.2885%" height="15" fill="rgb(209,103,24)" fg:x="31" fg:w="3"/><text x="3.2308%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.10%)</title><rect x="3.1731%" y="341" width="0.0962%" height="15" fill="rgb(229,88,8)" fg:x="33" fg:w="1"/><text x="3.4231%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (2 samples, 0.19%)</title><rect x="3.2692%" y="373" width="0.1923%" height="15" fill="rgb(213,181,19)" fg:x="34" fg:w="2"/><text x="3.5192%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (2 samples, 0.19%)</title><rect x="3.2692%" y="357" width="0.1923%" height="15" fill="rgb(254,191,54)" fg:x="34" fg:w="2"/><text x="3.5192%" y="367.50"></text></g><g><title> N]&gt; for [A (2 samples, 0.19%)</title><rect x="3.2692%" y="341" width="0.1923%" height="15" fill="rgb(241,83,37)" fg:x="34" fg:w="2"/><text x="3.5192%" y="351.50"></text></g><g><title> N]&gt;::eq (2 samples, 0.19%)</title><rect x="3.2692%" y="325" width="0.1923%" height="15" fill="rgb(233,36,39)" fg:x="34" fg:w="2"/><text x="3.5192%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.10%)</title><rect x="3.3654%" y="309" width="0.0962%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="1"/><text x="3.6154%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (15 samples, 1.44%)</title><rect x="2.1154%" y="421" width="1.4423%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="15"/><text x="2.3654%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (15 samples, 1.44%)</title><rect x="2.1154%" y="405" width="1.4423%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="15"/><text x="2.3654%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (15 samples, 1.44%)</title><rect x="2.1154%" y="389" width="1.4423%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="15"/><text x="2.3654%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (1 samples, 0.10%)</title><rect x="3.4615%" y="373" width="0.0962%" height="15" fill="rgb(231,60,39)" fg:x="36" fg:w="1"/><text x="3.7115%" y="383.50"></text></g><g><title> N]&gt; for [A (1 samples, 0.10%)</title><rect x="3.4615%" y="357" width="0.0962%" height="15" fill="rgb(208,69,12)" fg:x="36" fg:w="1"/><text x="3.7115%" y="367.50"></text></g><g><title> N]&gt;::eq (1 samples, 0.10%)</title><rect x="3.4615%" y="341" width="0.0962%" height="15" fill="rgb(235,93,37)" fg:x="36" fg:w="1"/><text x="3.7115%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.10%)</title><rect x="3.5577%" y="421" width="0.0962%" height="15" fill="rgb(213,116,39)" fg:x="37" fg:w="1"/><text x="3.8077%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="3.5577%" y="405" width="0.0962%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="1"/><text x="3.8077%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.10%)</title><rect x="3.5577%" y="389" width="0.0962%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="1"/><text x="3.8077%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.10%)</title><rect x="3.5577%" y="373" width="0.0962%" height="15" fill="rgb(218,138,4)" fg:x="37" fg:w="1"/><text x="3.8077%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="3.5577%" y="357" width="0.0962%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="1"/><text x="3.8077%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (38 samples, 3.65%)</title><rect x="0.0962%" y="437" width="3.6538%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="38"/><text x="0.3462%" y="447.50">spee..</text></g><g><title>speed-0b1675bc7d978a4b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.10%)</title><rect x="3.6538%" y="421" width="0.0962%" height="15" fill="rgb(206,27,48)" fg:x="38" fg:w="1"/><text x="3.9038%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.10%)</title><rect x="3.6538%" y="405" width="0.0962%" height="15" fill="rgb(225,35,8)" fg:x="38" fg:w="1"/><text x="3.9038%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.10%)</title><rect x="3.6538%" y="389" width="0.0962%" height="15" fill="rgb(250,213,24)" fg:x="38" fg:w="1"/><text x="3.9038%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.10%)</title><rect x="3.6538%" y="373" width="0.0962%" height="15" fill="rgb(247,123,22)" fg:x="38" fg:w="1"/><text x="3.9038%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.10%)</title><rect x="3.6538%" y="357" width="0.0962%" height="15" fill="rgb(231,138,38)" fg:x="38" fg:w="1"/><text x="3.9038%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.10%)</title><rect x="3.6538%" y="341" width="0.0962%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="1"/><text x="3.9038%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::sse2::Group::match_byte (1 samples, 0.10%)</title><rect x="3.6538%" y="325" width="0.0962%" height="15" fill="rgb(251,118,11)" fg:x="38" fg:w="1"/><text x="3.9038%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.10%)</title><rect x="3.6538%" y="309" width="0.0962%" height="15" fill="rgb(217,147,25)" fg:x="38" fg:w="1"/><text x="3.9038%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.10%)</title><rect x="3.6538%" y="293" width="0.0962%" height="15" fill="rgb(247,81,37)" fg:x="38" fg:w="1"/><text x="3.9038%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3 samples, 0.29%)</title><rect x="3.8462%" y="277" width="0.2885%" height="15" fill="rgb(209,12,38)" fg:x="40" fg:w="3"/><text x="4.0962%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.29%)</title><rect x="3.8462%" y="261" width="0.2885%" height="15" fill="rgb(227,1,9)" fg:x="40" fg:w="3"/><text x="4.0962%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::_{{closure}} (2 samples, 0.19%)</title><rect x="3.9423%" y="245" width="0.1923%" height="15" fill="rgb(248,47,43)" fg:x="41" fg:w="2"/><text x="4.1923%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (7 samples, 0.67%)</title><rect x="3.8462%" y="325" width="0.6731%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="7"/><text x="4.0962%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.67%)</title><rect x="3.8462%" y="309" width="0.6731%" height="15" fill="rgb(210,229,1)" fg:x="40" fg:w="7"/><text x="4.0962%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (7 samples, 0.67%)</title><rect x="3.8462%" y="293" width="0.6731%" height="15" fill="rgb(222,148,37)" fg:x="40" fg:w="7"/><text x="4.0962%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="4.1346%" y="277" width="0.3846%" height="15" fill="rgb(234,67,33)" fg:x="43" fg:w="4"/><text x="4.3846%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="4.4231%" y="261" width="0.0962%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="1"/><text x="4.6731%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (8 samples, 0.77%)</title><rect x="3.8462%" y="341" width="0.7692%" height="15" fill="rgb(247,138,52)" fg:x="40" fg:w="8"/><text x="4.0962%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (1 samples, 0.10%)</title><rect x="4.5192%" y="325" width="0.0962%" height="15" fill="rgb(213,79,30)" fg:x="47" fg:w="1"/><text x="4.7692%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::slice::_&lt;impl [T]&gt;::iter_mut (1 samples, 0.10%)</title><rect x="4.5192%" y="309" width="0.0962%" height="15" fill="rgb(246,177,23)" fg:x="47" fg:w="1"/><text x="4.7692%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="4.5192%" y="293" width="0.0962%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="1"/><text x="4.7692%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::zip (1 samples, 0.10%)</title><rect x="4.6154%" y="245" width="0.0962%" height="15" fill="rgb(216,154,8)" fg:x="48" fg:w="1"/><text x="4.8654%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.10%)</title><rect x="4.6154%" y="229" width="0.0962%" height="15" fill="rgb(244,35,45)" fg:x="48" fg:w="1"/><text x="4.8654%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.10%)</title><rect x="4.6154%" y="213" width="0.0962%" height="15" fill="rgb(251,115,12)" fg:x="48" fg:w="1"/><text x="4.8654%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (1 samples, 0.10%)</title><rect x="4.6154%" y="197" width="0.0962%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="1"/><text x="4.8654%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.10%)</title><rect x="4.6154%" y="181" width="0.0962%" height="15" fill="rgb(233,84,52)" fg:x="48" fg:w="1"/><text x="4.8654%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.29%)</title><rect x="4.7115%" y="229" width="0.2885%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="3"/><text x="4.9615%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::schedule (1 samples, 0.10%)</title><rect x="5.0000%" y="229" width="0.0962%" height="15" fill="rgb(249,43,39)" fg:x="52" fg:w="1"/><text x="5.2500%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256msg2 (1 samples, 0.10%)</title><rect x="5.0000%" y="213" width="0.0962%" height="15" fill="rgb(209,38,44)" fg:x="52" fg:w="1"/><text x="5.2500%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (14 samples, 1.35%)</title><rect x="3.8462%" y="373" width="1.3462%" height="15" fill="rgb(236,212,23)" fg:x="40" fg:w="14"/><text x="4.0962%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (14 samples, 1.35%)</title><rect x="3.8462%" y="357" width="1.3462%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="14"/><text x="4.0962%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (6 samples, 0.58%)</title><rect x="4.6154%" y="341" width="0.5769%" height="15" fill="rgb(211,96,35)" fg:x="48" fg:w="6"/><text x="4.8654%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (6 samples, 0.58%)</title><rect x="4.6154%" y="325" width="0.5769%" height="15" fill="rgb(253,215,40)" fg:x="48" fg:w="6"/><text x="4.8654%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::_{{closure}} (6 samples, 0.58%)</title><rect x="4.6154%" y="309" width="0.5769%" height="15" fill="rgb(211,81,21)" fg:x="48" fg:w="6"/><text x="4.8654%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (6 samples, 0.58%)</title><rect x="4.6154%" y="293" width="0.5769%" height="15" fill="rgb(208,190,38)" fg:x="48" fg:w="6"/><text x="4.8654%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (6 samples, 0.58%)</title><rect x="4.6154%" y="277" width="0.5769%" height="15" fill="rgb(235,213,38)" fg:x="48" fg:w="6"/><text x="4.8654%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (6 samples, 0.58%)</title><rect x="4.6154%" y="261" width="0.5769%" height="15" fill="rgb(237,122,38)" fg:x="48" fg:w="6"/><text x="4.8654%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_block_u32 (5 samples, 0.48%)</title><rect x="4.7115%" y="245" width="0.4808%" height="15" fill="rgb(244,218,35)" fg:x="49" fg:w="5"/><text x="4.9615%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.10%)</title><rect x="5.0962%" y="229" width="0.0962%" height="15" fill="rgb(240,68,47)" fg:x="53" fg:w="1"/><text x="5.3462%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.10%)</title><rect x="5.1923%" y="309" width="0.0962%" height="15" fill="rgb(210,16,53)" fg:x="54" fg:w="1"/><text x="5.4423%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="5.1923%" y="293" width="0.0962%" height="15" fill="rgb(235,124,12)" fg:x="54" fg:w="1"/><text x="5.4423%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::_{{closure}} (1 samples, 0.10%)</title><rect x="5.1923%" y="277" width="0.0962%" height="15" fill="rgb(224,169,11)" fg:x="54" fg:w="1"/><text x="5.4423%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`generic_array::impls::_&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::_{{closure}} (1 samples, 0.10%)</title><rect x="5.1923%" y="261" width="0.0962%" height="15" fill="rgb(250,166,2)" fg:x="54" fg:w="1"/><text x="5.4423%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::finalize (16 samples, 1.54%)</title><rect x="3.8462%" y="405" width="1.5385%" height="15" fill="rgb(242,216,29)" fg:x="40" fg:w="16"/><text x="4.0962%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`digest::FixedOutput::finalize_fixed (16 samples, 1.54%)</title><rect x="3.8462%" y="389" width="1.5385%" height="15" fill="rgb(230,116,27)" fg:x="40" fg:w="16"/><text x="4.0962%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="5.1923%" y="373" width="0.1923%" height="15" fill="rgb(228,99,48)" fg:x="54" fg:w="2"/><text x="5.4423%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="5.1923%" y="357" width="0.1923%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="2"/><text x="5.4423%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="5.1923%" y="341" width="0.1923%" height="15" fill="rgb(247,143,39)" fg:x="54" fg:w="2"/><text x="5.4423%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (2 samples, 0.19%)</title><rect x="5.1923%" y="325" width="0.1923%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="2"/><text x="5.4423%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="5.2885%" y="309" width="0.0962%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="1"/><text x="5.5385%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="5.2885%" y="293" width="0.0962%" height="15" fill="rgb(216,164,2)" fg:x="55" fg:w="1"/><text x="5.5385%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.10%)</title><rect x="5.2885%" y="277" width="0.0962%" height="15" fill="rgb(220,129,5)" fg:x="55" fg:w="1"/><text x="5.5385%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`DYLD-STUB$$memcpy (1 samples, 0.10%)</title><rect x="5.3846%" y="341" width="0.0962%" height="15" fill="rgb(242,17,10)" fg:x="56" fg:w="1"/><text x="5.6346%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3 samples, 0.29%)</title><rect x="5.4808%" y="293" width="0.2885%" height="15" fill="rgb(242,107,0)" fg:x="57" fg:w="3"/><text x="5.7308%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.19%)</title><rect x="5.5769%" y="277" width="0.1923%" height="15" fill="rgb(251,28,31)" fg:x="58" fg:w="2"/><text x="5.8269%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::_{{closure}} (2 samples, 0.19%)</title><rect x="5.5769%" y="261" width="0.1923%" height="15" fill="rgb(233,223,10)" fg:x="58" fg:w="2"/><text x="5.8269%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`generic_array::impls::_&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::_{{closure}} (2 samples, 0.19%)</title><rect x="5.5769%" y="245" width="0.1923%" height="15" fill="rgb(215,21,27)" fg:x="58" fg:w="2"/><text x="5.8269%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::new (5 samples, 0.48%)</title><rect x="5.3846%" y="405" width="0.4808%" height="15" fill="rgb(232,23,21)" fg:x="56" fg:w="5"/><text x="5.6346%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (5 samples, 0.48%)</title><rect x="5.3846%" y="389" width="0.4808%" height="15" fill="rgb(244,5,23)" fg:x="56" fg:w="5"/><text x="5.6346%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (5 samples, 0.48%)</title><rect x="5.3846%" y="373" width="0.4808%" height="15" fill="rgb(226,81,46)" fg:x="56" fg:w="5"/><text x="5.6346%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (5 samples, 0.48%)</title><rect x="5.3846%" y="357" width="0.4808%" height="15" fill="rgb(247,70,30)" fg:x="56" fg:w="5"/><text x="5.6346%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (4 samples, 0.38%)</title><rect x="5.4808%" y="341" width="0.3846%" height="15" fill="rgb(212,68,19)" fg:x="57" fg:w="4"/><text x="5.7308%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.38%)</title><rect x="5.4808%" y="325" width="0.3846%" height="15" fill="rgb(240,187,13)" fg:x="57" fg:w="4"/><text x="5.7308%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (4 samples, 0.38%)</title><rect x="5.4808%" y="309" width="0.3846%" height="15" fill="rgb(223,113,26)" fg:x="57" fg:w="4"/><text x="5.7308%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="5.7692%" y="293" width="0.0962%" height="15" fill="rgb(206,192,2)" fg:x="60" fg:w="1"/><text x="6.0192%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="5.7692%" y="277" width="0.0962%" height="15" fill="rgb(241,108,4)" fg:x="60" fg:w="1"/><text x="6.0192%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="5.8654%" y="261" width="0.0962%" height="15" fill="rgb(247,173,49)" fg:x="61" fg:w="1"/><text x="6.1154%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.10%)</title><rect x="5.8654%" y="245" width="0.0962%" height="15" fill="rgb(224,114,35)" fg:x="61" fg:w="1"/><text x="6.1154%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::num::_&lt;impl u32&gt;::from_be_bytes (1 samples, 0.10%)</title><rect x="5.9615%" y="261" width="0.0962%" height="15" fill="rgb(245,159,27)" fg:x="62" fg:w="1"/><text x="6.2115%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::schedule (3 samples, 0.29%)</title><rect x="6.1538%" y="245" width="0.2885%" height="15" fill="rgb(245,172,44)" fg:x="64" fg:w="3"/><text x="6.4038%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256msg2 (1 samples, 0.10%)</title><rect x="6.3462%" y="229" width="0.0962%" height="15" fill="rgb(236,23,11)" fg:x="66" fg:w="1"/><text x="6.5962%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::update (7 samples, 0.67%)</title><rect x="5.8654%" y="405" width="0.6731%" height="15" fill="rgb(205,117,38)" fg:x="61" fg:w="7"/><text x="6.1154%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (7 samples, 0.67%)</title><rect x="5.8654%" y="389" width="0.6731%" height="15" fill="rgb(237,72,25)" fg:x="61" fg:w="7"/><text x="6.1154%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (7 samples, 0.67%)</title><rect x="5.8654%" y="373" width="0.6731%" height="15" fill="rgb(244,70,9)" fg:x="61" fg:w="7"/><text x="6.1154%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::_{{closure}} (7 samples, 0.67%)</title><rect x="5.8654%" y="357" width="0.6731%" height="15" fill="rgb(217,125,39)" fg:x="61" fg:w="7"/><text x="6.1154%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (7 samples, 0.67%)</title><rect x="5.8654%" y="341" width="0.6731%" height="15" fill="rgb(235,36,10)" fg:x="61" fg:w="7"/><text x="6.1154%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (7 samples, 0.67%)</title><rect x="5.8654%" y="325" width="0.6731%" height="15" fill="rgb(251,123,47)" fg:x="61" fg:w="7"/><text x="6.1154%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (7 samples, 0.67%)</title><rect x="5.8654%" y="309" width="0.6731%" height="15" fill="rgb(221,13,13)" fg:x="61" fg:w="7"/><text x="6.1154%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (7 samples, 0.67%)</title><rect x="5.8654%" y="293" width="0.6731%" height="15" fill="rgb(238,131,9)" fg:x="61" fg:w="7"/><text x="6.1154%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (7 samples, 0.67%)</title><rect x="5.8654%" y="277" width="0.6731%" height="15" fill="rgb(211,50,8)" fg:x="61" fg:w="7"/><text x="6.1154%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_block_u32 (5 samples, 0.48%)</title><rect x="6.0577%" y="261" width="0.4808%" height="15" fill="rgb(245,182,24)" fg:x="63" fg:w="5"/><text x="6.3077%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.10%)</title><rect x="6.4423%" y="245" width="0.0962%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="1"/><text x="6.6923%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_linear::_{{closure}} (71 samples, 6.83%)</title><rect x="0.0962%" y="533" width="6.8269%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="71"/><text x="0.3462%" y="543.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_linear (71 samples, 6.83%)</title><rect x="0.0962%" y="517" width="6.8269%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="71"/><text x="0.3462%" y="527.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::Bencher::iter (71 samples, 6.83%)</title><rect x="0.0962%" y="501" width="6.8269%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="71"/><text x="0.3462%" y="511.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::ns_iter_inner (71 samples, 6.83%)</title><rect x="0.0962%" y="485" width="6.8269%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="71"/><text x="0.3462%" y="495.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_linear::_{{closure}} (71 samples, 6.83%)</title><rect x="0.0962%" y="469" width="6.8269%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="71"/><text x="0.3462%" y="479.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (71 samples, 6.83%)</title><rect x="0.0962%" y="453" width="6.8269%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="71"/><text x="0.3462%" y="463.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::new (33 samples, 3.17%)</title><rect x="3.7500%" y="437" width="3.1731%" height="15" fill="rgb(232,18,1)" fg:x="39" fg:w="33"/><text x="4.0000%" y="447.50">spe..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::hash (32 samples, 3.08%)</title><rect x="3.8462%" y="421" width="3.0769%" height="15" fill="rgb(215,41,42)" fg:x="40" fg:w="32"/><text x="4.0962%" y="431.50">spe..</text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format (4 samples, 0.38%)</title><rect x="6.5385%" y="405" width="0.3846%" height="15" fill="rgb(224,123,36)" fg:x="68" fg:w="4"/><text x="6.7885%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::option::Option&lt;T&gt;::map_or_else (4 samples, 0.38%)</title><rect x="6.5385%" y="389" width="0.3846%" height="15" fill="rgb(240,125,3)" fg:x="68" fg:w="4"/><text x="6.7885%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::_{{closure}} (4 samples, 0.38%)</title><rect x="6.5385%" y="373" width="0.3846%" height="15" fill="rgb(205,98,50)" fg:x="68" fg:w="4"/><text x="6.7885%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::format_inner (4 samples, 0.38%)</title><rect x="6.5385%" y="357" width="0.3846%" height="15" fill="rgb(205,185,37)" fg:x="68" fg:w="4"/><text x="6.7885%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::write (4 samples, 0.38%)</title><rect x="6.5385%" y="341" width="0.3846%" height="15" fill="rgb(238,207,15)" fg:x="68" fg:w="4"/><text x="6.7885%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::fmt::Debug for [T (4 samples, 0.38%)</title><rect x="6.5385%" y="325" width="0.3846%" height="15" fill="rgb(213,199,42)" fg:x="68" fg:w="4"/><text x="6.7885%" y="335.50"></text></g><g><title> N]&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="309" width="0.3846%" height="15" fill="rgb(235,201,11)" fg:x="68" fg:w="4"/><text x="6.7885%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="293" width="0.3846%" height="15" fill="rgb(207,46,11)" fg:x="68" fg:w="4"/><text x="6.7885%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;[T] as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="277" width="0.3846%" height="15" fill="rgb(241,35,35)" fg:x="68" fg:w="4"/><text x="6.7885%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugList::entries (4 samples, 0.38%)</title><rect x="6.5385%" y="261" width="0.3846%" height="15" fill="rgb(243,32,47)" fg:x="68" fg:w="4"/><text x="6.7885%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugSet::entry (4 samples, 0.38%)</title><rect x="6.5385%" y="245" width="0.3846%" height="15" fill="rgb(247,202,23)" fg:x="68" fg:w="4"/><text x="6.7885%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugInner::entry (4 samples, 0.38%)</title><rect x="6.5385%" y="229" width="0.3846%" height="15" fill="rgb(219,102,11)" fg:x="68" fg:w="4"/><text x="6.7885%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="213" width="0.3846%" height="15" fill="rgb(243,110,44)" fg:x="68" fg:w="4"/><text x="6.7885%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::_&lt;impl core::fmt::Debug for u8&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="197" width="0.3846%" height="15" fill="rgb(222,74,54)" fg:x="68" fg:w="4"/><text x="6.7885%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::imp::_&lt;impl core::fmt::Display for u8&gt;::fmt (4 samples, 0.38%)</title><rect x="6.5385%" y="181" width="0.3846%" height="15" fill="rgb(216,99,12)" fg:x="68" fg:w="4"/><text x="6.7885%" y="191.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.10%)</title><rect x="6.8269%" y="165" width="0.0962%" height="15" fill="rgb(226,22,26)" fg:x="71" fg:w="1"/><text x="7.0769%" y="175.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::insert (2 samples, 0.19%)</title><rect x="6.9231%" y="405" width="0.1923%" height="15" fill="rgb(217,163,10)" fg:x="72" fg:w="2"/><text x="7.1731%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.19%)</title><rect x="6.9231%" y="389" width="0.1923%" height="15" fill="rgb(213,25,53)" fg:x="72" fg:w="2"/><text x="7.1731%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (3 samples, 0.29%)</title><rect x="6.9231%" y="437" width="0.2885%" height="15" fill="rgb(252,105,26)" fg:x="72" fg:w="3"/><text x="7.1731%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (3 samples, 0.29%)</title><rect x="6.9231%" y="421" width="0.2885%" height="15" fill="rgb(220,39,43)" fg:x="72" fg:w="3"/><text x="7.1731%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (1 samples, 0.10%)</title><rect x="7.1154%" y="405" width="0.0962%" height="15" fill="rgb(229,68,48)" fg:x="74" fg:w="1"/><text x="7.3654%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.10%)</title><rect x="7.1154%" y="389" width="0.0962%" height="15" fill="rgb(252,8,32)" fg:x="74" fg:w="1"/><text x="7.3654%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="7.1154%" y="373" width="0.0962%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="1"/><text x="7.3654%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.10%)</title><rect x="7.1154%" y="357" width="0.0962%" height="15" fill="rgb(229,81,49)" fg:x="74" fg:w="1"/><text x="7.3654%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="7.3077%" y="341" width="0.1923%" height="15" fill="rgb(236,28,36)" fg:x="76" fg:w="2"/><text x="7.5577%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="7.3077%" y="325" width="0.1923%" height="15" fill="rgb(249,185,26)" fg:x="76" fg:w="2"/><text x="7.5577%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="7.3077%" y="309" width="0.1923%" height="15" fill="rgb(249,174,33)" fg:x="76" fg:w="2"/><text x="7.5577%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (2 samples, 0.19%)</title><rect x="7.3077%" y="293" width="0.1923%" height="15" fill="rgb(233,201,37)" fg:x="76" fg:w="2"/><text x="7.5577%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2 samples, 0.19%)</title><rect x="7.3077%" y="277" width="0.1923%" height="15" fill="rgb(221,78,26)" fg:x="76" fg:w="2"/><text x="7.5577%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="7.4038%" y="261" width="0.0962%" height="15" fill="rgb(250,127,30)" fg:x="77" fg:w="1"/><text x="7.6538%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`generic_array::impls::_&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::_{{closure}} (1 samples, 0.10%)</title><rect x="7.4038%" y="245" width="0.0962%" height="15" fill="rgb(230,49,44)" fg:x="77" fg:w="1"/><text x="7.6538%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="7.5000%" y="325" width="0.0962%" height="15" fill="rgb(229,67,23)" fg:x="78" fg:w="1"/><text x="7.7500%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="7.5962%" y="309" width="0.0962%" height="15" fill="rgb(249,83,47)" fg:x="79" fg:w="1"/><text x="7.8462%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="7.5962%" y="293" width="0.0962%" height="15" fill="rgb(215,43,3)" fg:x="79" fg:w="1"/><text x="7.8462%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::num::_&lt;impl u32&gt;::from_be_bytes (2 samples, 0.19%)</title><rect x="7.6923%" y="245" width="0.1923%" height="15" fill="rgb(238,154,13)" fg:x="80" fg:w="2"/><text x="7.9423%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::_{{closure}} (3 samples, 0.29%)</title><rect x="7.6923%" y="309" width="0.2885%" height="15" fill="rgb(219,56,2)" fg:x="80" fg:w="3"/><text x="7.9423%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (3 samples, 0.29%)</title><rect x="7.6923%" y="293" width="0.2885%" height="15" fill="rgb(233,0,4)" fg:x="80" fg:w="3"/><text x="7.9423%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (3 samples, 0.29%)</title><rect x="7.6923%" y="277" width="0.2885%" height="15" fill="rgb(235,30,7)" fg:x="80" fg:w="3"/><text x="7.9423%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (3 samples, 0.29%)</title><rect x="7.6923%" y="261" width="0.2885%" height="15" fill="rgb(250,79,13)" fg:x="80" fg:w="3"/><text x="7.9423%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.10%)</title><rect x="7.8846%" y="245" width="0.0962%" height="15" fill="rgb(211,146,34)" fg:x="82" fg:w="1"/><text x="8.1346%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::schedule (1 samples, 0.10%)</title><rect x="7.8846%" y="229" width="0.0962%" height="15" fill="rgb(228,22,38)" fg:x="82" fg:w="1"/><text x="8.1346%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256msg2 (1 samples, 0.10%)</title><rect x="7.8846%" y="213" width="0.0962%" height="15" fill="rgb(235,168,5)" fg:x="82" fg:w="1"/><text x="8.1346%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (8 samples, 0.77%)</title><rect x="7.3077%" y="373" width="0.7692%" height="15" fill="rgb(221,155,16)" fg:x="76" fg:w="8"/><text x="7.5577%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (8 samples, 0.77%)</title><rect x="7.3077%" y="357" width="0.7692%" height="15" fill="rgb(215,215,53)" fg:x="76" fg:w="8"/><text x="7.5577%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (6 samples, 0.58%)</title><rect x="7.5000%" y="341" width="0.5769%" height="15" fill="rgb(223,4,10)" fg:x="78" fg:w="6"/><text x="7.7500%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (5 samples, 0.48%)</title><rect x="7.5962%" y="325" width="0.4808%" height="15" fill="rgb(234,103,6)" fg:x="79" fg:w="5"/><text x="7.8462%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::slice::_&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.10%)</title><rect x="7.9808%" y="309" width="0.0962%" height="15" fill="rgb(227,97,0)" fg:x="83" fg:w="1"/><text x="8.2308%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2 samples, 0.19%)</title><rect x="8.0769%" y="309" width="0.1923%" height="15" fill="rgb(234,150,53)" fg:x="84" fg:w="2"/><text x="8.3269%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::finalize (11 samples, 1.06%)</title><rect x="7.3077%" y="405" width="1.0577%" height="15" fill="rgb(228,201,54)" fg:x="76" fg:w="11"/><text x="7.5577%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`digest::FixedOutput::finalize_fixed (11 samples, 1.06%)</title><rect x="7.3077%" y="389" width="1.0577%" height="15" fill="rgb(222,22,37)" fg:x="76" fg:w="11"/><text x="7.5577%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (3 samples, 0.29%)</title><rect x="8.0769%" y="373" width="0.2885%" height="15" fill="rgb(237,53,32)" fg:x="84" fg:w="3"/><text x="8.3269%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (3 samples, 0.29%)</title><rect x="8.0769%" y="357" width="0.2885%" height="15" fill="rgb(233,25,53)" fg:x="84" fg:w="3"/><text x="8.3269%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.29%)</title><rect x="8.0769%" y="341" width="0.2885%" height="15" fill="rgb(210,40,34)" fg:x="84" fg:w="3"/><text x="8.3269%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (3 samples, 0.29%)</title><rect x="8.0769%" y="325" width="0.2885%" height="15" fill="rgb(241,220,44)" fg:x="84" fg:w="3"/><text x="8.3269%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="8.2692%" y="309" width="0.0962%" height="15" fill="rgb(235,28,35)" fg:x="86" fg:w="1"/><text x="8.5192%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="8.2692%" y="293" width="0.0962%" height="15" fill="rgb(210,56,17)" fg:x="86" fg:w="1"/><text x="8.5192%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.10%)</title><rect x="8.3654%" y="293" width="0.0962%" height="15" fill="rgb(224,130,29)" fg:x="87" fg:w="1"/><text x="8.6154%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (2 samples, 0.19%)</title><rect x="8.3654%" y="373" width="0.1923%" height="15" fill="rgb(235,212,8)" fg:x="87" fg:w="2"/><text x="8.6154%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="8.3654%" y="357" width="0.1923%" height="15" fill="rgb(223,33,50)" fg:x="87" fg:w="2"/><text x="8.6154%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="8.3654%" y="341" width="0.1923%" height="15" fill="rgb(219,149,13)" fg:x="87" fg:w="2"/><text x="8.6154%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="8.3654%" y="325" width="0.1923%" height="15" fill="rgb(250,156,29)" fg:x="87" fg:w="2"/><text x="8.6154%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (2 samples, 0.19%)</title><rect x="8.3654%" y="309" width="0.1923%" height="15" fill="rgb(216,193,19)" fg:x="87" fg:w="2"/><text x="8.6154%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="8.4615%" y="293" width="0.0962%" height="15" fill="rgb(216,135,14)" fg:x="88" fg:w="1"/><text x="8.7115%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="8.4615%" y="277" width="0.0962%" height="15" fill="rgb(241,47,5)" fg:x="88" fg:w="1"/><text x="8.7115%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::new (3 samples, 0.29%)</title><rect x="8.3654%" y="405" width="0.2885%" height="15" fill="rgb(233,42,35)" fg:x="87" fg:w="3"/><text x="8.6154%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (3 samples, 0.29%)</title><rect x="8.3654%" y="389" width="0.2885%" height="15" fill="rgb(231,13,6)" fg:x="87" fg:w="3"/><text x="8.6154%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as core::default::Default&gt;::default (1 samples, 0.10%)</title><rect x="8.5577%" y="373" width="0.0962%" height="15" fill="rgb(207,181,40)" fg:x="89" fg:w="1"/><text x="8.8077%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.10%)</title><rect x="8.6538%" y="261" width="0.0962%" height="15" fill="rgb(254,173,49)" fg:x="90" fg:w="1"/><text x="8.9038%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.10%)</title><rect x="8.6538%" y="245" width="0.0962%" height="15" fill="rgb(221,1,38)" fg:x="90" fg:w="1"/><text x="8.9038%" y="255.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.10%)</title><rect x="8.6538%" y="229" width="0.0962%" height="15" fill="rgb(206,124,46)" fg:x="90" fg:w="1"/><text x="8.9038%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (1 samples, 0.10%)</title><rect x="8.6538%" y="213" width="0.0962%" height="15" fill="rgb(249,21,11)" fg:x="90" fg:w="1"/><text x="8.9038%" y="223.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.10%)</title><rect x="8.6538%" y="197" width="0.0962%" height="15" fill="rgb(222,201,40)" fg:x="90" fg:w="1"/><text x="8.9038%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::update (2 samples, 0.19%)</title><rect x="8.6538%" y="405" width="0.1923%" height="15" fill="rgb(235,61,29)" fg:x="90" fg:w="2"/><text x="8.9038%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (2 samples, 0.19%)</title><rect x="8.6538%" y="389" width="0.1923%" height="15" fill="rgb(219,207,3)" fg:x="90" fg:w="2"/><text x="8.9038%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (2 samples, 0.19%)</title><rect x="8.6538%" y="373" width="0.1923%" height="15" fill="rgb(222,56,46)" fg:x="90" fg:w="2"/><text x="8.9038%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::_{{closure}} (2 samples, 0.19%)</title><rect x="8.6538%" y="357" width="0.1923%" height="15" fill="rgb(239,76,54)" fg:x="90" fg:w="2"/><text x="8.9038%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.19%)</title><rect x="8.6538%" y="341" width="0.1923%" height="15" fill="rgb(231,124,27)" fg:x="90" fg:w="2"/><text x="8.9038%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.19%)</title><rect x="8.6538%" y="325" width="0.1923%" height="15" fill="rgb(249,195,6)" fg:x="90" fg:w="2"/><text x="8.9038%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (2 samples, 0.19%)</title><rect x="8.6538%" y="309" width="0.1923%" height="15" fill="rgb(237,174,47)" fg:x="90" fg:w="2"/><text x="8.9038%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (2 samples, 0.19%)</title><rect x="8.6538%" y="293" width="0.1923%" height="15" fill="rgb(206,201,31)" fg:x="90" fg:w="2"/><text x="8.9038%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (2 samples, 0.19%)</title><rect x="8.6538%" y="277" width="0.1923%" height="15" fill="rgb(231,57,52)" fg:x="90" fg:w="2"/><text x="8.9038%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.10%)</title><rect x="8.7500%" y="261" width="0.0962%" height="15" fill="rgb(248,177,22)" fg:x="91" fg:w="1"/><text x="9.0000%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.10%)</title><rect x="8.7500%" y="245" width="0.0962%" height="15" fill="rgb(215,211,37)" fg:x="91" fg:w="1"/><text x="9.0000%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::Formatter::debug_list (1 samples, 0.10%)</title><rect x="8.8462%" y="261" width="0.0962%" height="15" fill="rgb(241,128,51)" fg:x="92" fg:w="1"/><text x="9.0962%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="8.8462%" y="245" width="0.0962%" height="15" fill="rgb(227,165,31)" fg:x="92" fg:w="1"/><text x="9.0962%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="8.8462%" y="229" width="0.0962%" height="15" fill="rgb(228,167,24)" fg:x="92" fg:w="1"/><text x="9.0962%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.10%)</title><rect x="8.8462%" y="213" width="0.0962%" height="15" fill="rgb(228,143,12)" fg:x="92" fg:w="1"/><text x="9.0962%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.10%)</title><rect x="8.9423%" y="229" width="0.0962%" height="15" fill="rgb(249,149,8)" fg:x="93" fg:w="1"/><text x="9.1923%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.10%)</title><rect x="9.1346%" y="149" width="0.0962%" height="15" fill="rgb(243,35,44)" fg:x="95" fg:w="1"/><text x="9.3846%" y="159.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="9.0385%" y="213" width="0.3846%" height="15" fill="rgb(246,89,9)" fg:x="94" fg:w="4"/><text x="9.2885%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::_&lt;impl core::fmt::Debug for u8&gt;::fmt (4 samples, 0.38%)</title><rect x="9.0385%" y="197" width="0.3846%" height="15" fill="rgb(233,213,13)" fg:x="94" fg:w="4"/><text x="9.2885%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::imp::_&lt;impl core::fmt::Display for u8&gt;::fmt (4 samples, 0.38%)</title><rect x="9.0385%" y="181" width="0.3846%" height="15" fill="rgb(233,141,41)" fg:x="94" fg:w="4"/><text x="9.2885%" y="191.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.38%)</title><rect x="9.0385%" y="165" width="0.3846%" height="15" fill="rgb(239,167,4)" fg:x="94" fg:w="4"/><text x="9.2885%" y="175.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.19%)</title><rect x="9.2308%" y="149" width="0.1923%" height="15" fill="rgb(209,217,16)" fg:x="96" fg:w="2"/><text x="9.4808%" y="159.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="9.3269%" y="133" width="0.0962%" height="15" fill="rgb(219,88,35)" fg:x="97" fg:w="1"/><text x="9.5769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.10%)</title><rect x="9.3269%" y="117" width="0.0962%" height="15" fill="rgb(220,193,23)" fg:x="97" fg:w="1"/><text x="9.5769%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.10%)</title><rect x="9.3269%" y="101" width="0.0962%" height="15" fill="rgb(230,90,52)" fg:x="97" fg:w="1"/><text x="9.5769%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.10%)</title><rect x="9.3269%" y="85" width="0.0962%" height="15" fill="rgb(252,106,19)" fg:x="97" fg:w="1"/><text x="9.5769%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.10%)</title><rect x="9.3269%" y="69" width="0.0962%" height="15" fill="rgb(206,74,20)" fg:x="97" fg:w="1"/><text x="9.5769%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="9.3269%" y="53" width="0.0962%" height="15" fill="rgb(230,138,44)" fg:x="97" fg:w="1"/><text x="9.5769%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="9.3269%" y="37" width="0.0962%" height="15" fill="rgb(235,182,43)" fg:x="97" fg:w="1"/><text x="9.5769%" y="47.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::hash (23 samples, 2.21%)</title><rect x="7.3077%" y="421" width="2.2115%" height="15" fill="rgb(242,16,51)" fg:x="76" fg:w="23"/><text x="7.5577%" y="431.50">s..</text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format (7 samples, 0.67%)</title><rect x="8.8462%" y="405" width="0.6731%" height="15" fill="rgb(248,9,4)" fg:x="92" fg:w="7"/><text x="9.0962%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::option::Option&lt;T&gt;::map_or_else (7 samples, 0.67%)</title><rect x="8.8462%" y="389" width="0.6731%" height="15" fill="rgb(210,31,22)" fg:x="92" fg:w="7"/><text x="9.0962%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::_{{closure}} (7 samples, 0.67%)</title><rect x="8.8462%" y="373" width="0.6731%" height="15" fill="rgb(239,54,39)" fg:x="92" fg:w="7"/><text x="9.0962%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::format_inner (7 samples, 0.67%)</title><rect x="8.8462%" y="357" width="0.6731%" height="15" fill="rgb(230,99,41)" fg:x="92" fg:w="7"/><text x="9.0962%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::write (7 samples, 0.67%)</title><rect x="8.8462%" y="341" width="0.6731%" height="15" fill="rgb(253,106,12)" fg:x="92" fg:w="7"/><text x="9.0962%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::fmt::Debug for [T (7 samples, 0.67%)</title><rect x="8.8462%" y="325" width="0.6731%" height="15" fill="rgb(213,46,41)" fg:x="92" fg:w="7"/><text x="9.0962%" y="335.50"></text></g><g><title> N]&gt;::fmt (7 samples, 0.67%)</title><rect x="8.8462%" y="309" width="0.6731%" height="15" fill="rgb(215,133,35)" fg:x="92" fg:w="7"/><text x="9.0962%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (7 samples, 0.67%)</title><rect x="8.8462%" y="293" width="0.6731%" height="15" fill="rgb(213,28,5)" fg:x="92" fg:w="7"/><text x="9.0962%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;[T] as core::fmt::Debug&gt;::fmt (7 samples, 0.67%)</title><rect x="8.8462%" y="277" width="0.6731%" height="15" fill="rgb(215,77,49)" fg:x="92" fg:w="7"/><text x="9.0962%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugList::entries (6 samples, 0.58%)</title><rect x="8.9423%" y="261" width="0.5769%" height="15" fill="rgb(248,100,22)" fg:x="93" fg:w="6"/><text x="9.1923%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugSet::entry (6 samples, 0.58%)</title><rect x="8.9423%" y="245" width="0.5769%" height="15" fill="rgb(208,67,9)" fg:x="93" fg:w="6"/><text x="9.1923%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugInner::entry (5 samples, 0.48%)</title><rect x="9.0385%" y="229" width="0.4808%" height="15" fill="rgb(219,133,21)" fg:x="94" fg:w="5"/><text x="9.2885%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="9.4231%" y="213" width="0.0962%" height="15" fill="rgb(246,46,29)" fg:x="98" fg:w="1"/><text x="9.6731%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="9.4231%" y="197" width="0.0962%" height="15" fill="rgb(246,185,52)" fg:x="98" fg:w="1"/><text x="9.6731%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="9.4231%" y="181" width="0.0962%" height="15" fill="rgb(252,136,11)" fg:x="98" fg:w="1"/><text x="9.6731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.10%)</title><rect x="9.4231%" y="165" width="0.0962%" height="15" fill="rgb(219,138,53)" fg:x="98" fg:w="1"/><text x="9.6731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.10%)</title><rect x="9.4231%" y="149" width="0.0962%" height="15" fill="rgb(211,51,23)" fg:x="98" fg:w="1"/><text x="9.6731%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.10%)</title><rect x="9.4231%" y="133" width="0.0962%" height="15" fill="rgb(247,221,28)" fg:x="98" fg:w="1"/><text x="9.6731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.10%)</title><rect x="9.4231%" y="117" width="0.0962%" height="15" fill="rgb(251,222,45)" fg:x="98" fg:w="1"/><text x="9.6731%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="9.4231%" y="101" width="0.0962%" height="15" fill="rgb(217,162,53)" fg:x="98" fg:w="1"/><text x="9.6731%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="9.4231%" y="85" width="0.0962%" height="15" fill="rgb(229,93,14)" fg:x="98" fg:w="1"/><text x="9.6731%" y="95.50"></text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_root::_{{closure}} (28 samples, 2.69%)</title><rect x="6.9231%" y="533" width="2.6923%" height="15" fill="rgb(209,67,49)" fg:x="72" fg:w="28"/><text x="7.1731%" y="543.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_root (28 samples, 2.69%)</title><rect x="6.9231%" y="517" width="2.6923%" height="15" fill="rgb(213,87,29)" fg:x="72" fg:w="28"/><text x="7.1731%" y="527.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::Bencher::iter (28 samples, 2.69%)</title><rect x="6.9231%" y="501" width="2.6923%" height="15" fill="rgb(205,151,52)" fg:x="72" fg:w="28"/><text x="7.1731%" y="511.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::ns_iter_inner (28 samples, 2.69%)</title><rect x="6.9231%" y="485" width="2.6923%" height="15" fill="rgb(253,215,39)" fg:x="72" fg:w="28"/><text x="7.1731%" y="495.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_1_000_root::_{{closure}} (28 samples, 2.69%)</title><rect x="6.9231%" y="469" width="2.6923%" height="15" fill="rgb(221,220,41)" fg:x="72" fg:w="28"/><text x="7.1731%" y="479.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (28 samples, 2.69%)</title><rect x="6.9231%" y="453" width="2.6923%" height="15" fill="rgb(218,133,21)" fg:x="72" fg:w="28"/><text x="7.1731%" y="463.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::new (25 samples, 2.40%)</title><rect x="7.2115%" y="437" width="2.4038%" height="15" fill="rgb(221,193,43)" fg:x="75" fg:w="25"/><text x="7.4615%" y="447.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`core::slice::_&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.10%)</title><rect x="9.5192%" y="421" width="0.0962%" height="15" fill="rgb(240,128,52)" fg:x="99" fg:w="1"/><text x="9.7692%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.29%)</title><rect x="9.6154%" y="453" width="0.2885%" height="15" fill="rgb(253,114,12)" fg:x="100" fg:w="3"/><text x="9.8654%" y="463.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.19%)</title><rect x="9.7115%" y="437" width="0.1923%" height="15" fill="rgb(215,223,47)" fg:x="101" fg:w="2"/><text x="9.9615%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.19%)</title><rect x="10.0000%" y="437" width="0.1923%" height="15" fill="rgb(248,225,23)" fg:x="104" fg:w="2"/><text x="10.2500%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.10%)</title><rect x="10.1923%" y="437" width="0.0962%" height="15" fill="rgb(250,108,0)" fg:x="106" fg:w="1"/><text x="10.4423%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (2 samples, 0.19%)</title><rect x="10.2885%" y="437" width="0.1923%" height="15" fill="rgb(228,208,7)" fg:x="107" fg:w="2"/><text x="10.5385%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.19%)</title><rect x="10.2885%" y="421" width="0.1923%" height="15" fill="rgb(244,45,10)" fg:x="107" fg:w="2"/><text x="10.5385%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (1 samples, 0.10%)</title><rect x="10.3846%" y="405" width="0.0962%" height="15" fill="rgb(207,125,25)" fg:x="108" fg:w="1"/><text x="10.6346%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (1 samples, 0.10%)</title><rect x="10.3846%" y="389" width="0.0962%" height="15" fill="rgb(210,195,18)" fg:x="108" fg:w="1"/><text x="10.6346%" y="399.50"></text></g><g><title> N]&gt; for [A (1 samples, 0.10%)</title><rect x="10.3846%" y="373" width="0.0962%" height="15" fill="rgb(249,80,12)" fg:x="108" fg:w="1"/><text x="10.6346%" y="383.50"></text></g><g><title> N]&gt;::eq (1 samples, 0.10%)</title><rect x="10.3846%" y="357" width="0.0962%" height="15" fill="rgb(221,65,9)" fg:x="108" fg:w="1"/><text x="10.6346%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.10%)</title><rect x="10.3846%" y="341" width="0.0962%" height="15" fill="rgb(235,49,36)" fg:x="108" fg:w="1"/><text x="10.6346%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.10%)</title><rect x="10.3846%" y="325" width="0.0962%" height="15" fill="rgb(225,32,20)" fg:x="108" fg:w="1"/><text x="10.6346%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.38%)</title><rect x="20.9615%" y="421" width="0.3846%" height="15" fill="rgb(215,141,46)" fg:x="218" fg:w="4"/><text x="21.2115%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.29%)</title><rect x="21.3462%" y="421" width="0.2885%" height="15" fill="rgb(250,160,47)" fg:x="222" fg:w="3"/><text x="21.5962%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (94 samples, 9.04%)</title><rect x="22.2115%" y="405" width="9.0385%" height="15" fill="rgb(216,222,40)" fg:x="231" fg:w="94"/><text x="22.4615%" y="415.50">speed-0b1675b..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (76 samples, 7.31%)</title><rect x="23.9423%" y="389" width="7.3077%" height="15" fill="rgb(234,217,39)" fg:x="249" fg:w="76"/><text x="24.1923%" y="399.50">speed-0b16..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (35 samples, 3.37%)</title><rect x="27.8846%" y="373" width="3.3654%" height="15" fill="rgb(207,178,40)" fg:x="290" fg:w="35"/><text x="28.1346%" y="383.50">spe..</text></g><g><title>speed-0b1675bc7d978a4b`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.87%)</title><rect x="31.2500%" y="405" width="0.8654%" height="15" fill="rgb(221,136,13)" fg:x="325" fg:w="9"/><text x="31.5000%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (110 samples, 10.58%)</title><rect x="21.6346%" y="421" width="10.5769%" height="15" fill="rgb(249,199,10)" fg:x="225" fg:w="110"/><text x="21.8846%" y="431.50">speed-0b1675bc7..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="32.1154%" y="405" width="0.0962%" height="15" fill="rgb(249,222,13)" fg:x="334" fg:w="1"/><text x="32.3654%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.19%)</title><rect x="32.2115%" y="421" width="0.1923%" height="15" fill="rgb(244,185,38)" fg:x="335" fg:w="2"/><text x="32.4615%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (25 samples, 2.40%)</title><rect x="32.5000%" y="405" width="2.4038%" height="15" fill="rgb(236,202,9)" fg:x="338" fg:w="25"/><text x="32.7500%" y="415.50">li..</text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.10%)</title><rect x="34.9038%" y="245" width="0.0962%" height="15" fill="rgb(250,229,37)" fg:x="363" fg:w="1"/><text x="35.1538%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.58%)</title><rect x="34.9038%" y="405" width="0.5769%" height="15" fill="rgb(206,174,23)" fg:x="363" fg:w="6"/><text x="35.1538%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.58%)</title><rect x="34.9038%" y="389" width="0.5769%" height="15" fill="rgb(211,33,43)" fg:x="363" fg:w="6"/><text x="35.1538%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.58%)</title><rect x="34.9038%" y="373" width="0.5769%" height="15" fill="rgb(245,58,50)" fg:x="363" fg:w="6"/><text x="35.1538%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.58%)</title><rect x="34.9038%" y="357" width="0.5769%" height="15" fill="rgb(244,68,36)" fg:x="363" fg:w="6"/><text x="35.1538%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::finish_grow (6 samples, 0.58%)</title><rect x="34.9038%" y="341" width="0.5769%" height="15" fill="rgb(232,229,15)" fg:x="363" fg:w="6"/><text x="35.1538%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.58%)</title><rect x="34.9038%" y="325" width="0.5769%" height="15" fill="rgb(254,30,23)" fg:x="363" fg:w="6"/><text x="35.1538%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::alloc::Global::grow_impl (6 samples, 0.58%)</title><rect x="34.9038%" y="309" width="0.5769%" height="15" fill="rgb(235,160,14)" fg:x="363" fg:w="6"/><text x="35.1538%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.58%)</title><rect x="34.9038%" y="293" width="0.5769%" height="15" fill="rgb(212,155,44)" fg:x="363" fg:w="6"/><text x="35.1538%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.58%)</title><rect x="34.9038%" y="277" width="0.5769%" height="15" fill="rgb(226,2,50)" fg:x="363" fg:w="6"/><text x="35.1538%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.58%)</title><rect x="34.9038%" y="261" width="0.5769%" height="15" fill="rgb(234,177,6)" fg:x="363" fg:w="6"/><text x="35.1538%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.48%)</title><rect x="35.0000%" y="245" width="0.4808%" height="15" fill="rgb(217,24,9)" fg:x="364" fg:w="5"/><text x="35.2500%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::insert (36 samples, 3.46%)</title><rect x="32.4038%" y="421" width="3.4615%" height="15" fill="rgb(220,13,46)" fg:x="337" fg:w="36"/><text x="32.6538%" y="431.50">spe..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (4 samples, 0.38%)</title><rect x="35.4808%" y="405" width="0.3846%" height="15" fill="rgb(239,221,27)" fg:x="369" fg:w="4"/><text x="35.7308%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.19%)</title><rect x="35.6731%" y="389" width="0.1923%" height="15" fill="rgb(222,198,25)" fg:x="371" fg:w="2"/><text x="35.9231%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.38%)</title><rect x="35.8654%" y="421" width="0.3846%" height="15" fill="rgb(211,99,13)" fg:x="373" fg:w="4"/><text x="36.1154%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.10%)</title><rect x="38.3654%" y="389" width="0.0962%" height="15" fill="rgb(232,111,31)" fg:x="399" fg:w="1"/><text x="38.6154%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 7.02%)</title><rect x="37.3077%" y="405" width="7.0192%" height="15" fill="rgb(245,82,37)" fg:x="388" fg:w="73"/><text x="37.5577%" y="415.50">speed-0b1..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (61 samples, 5.87%)</title><rect x="38.4615%" y="389" width="5.8654%" height="15" fill="rgb(227,149,46)" fg:x="400" fg:w="61"/><text x="38.7115%" y="399.50">speed-0..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (25 samples, 2.40%)</title><rect x="41.9231%" y="373" width="2.4038%" height="15" fill="rgb(218,36,50)" fg:x="436" fg:w="25"/><text x="42.1731%" y="383.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="44.3269%" y="405" width="0.1923%" height="15" fill="rgb(226,80,48)" fg:x="461" fg:w="2"/><text x="44.5769%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (44 samples, 4.23%)</title><rect x="56.7308%" y="373" width="4.2308%" height="15" fill="rgb(238,224,15)" fg:x="590" fg:w="44"/><text x="56.9808%" y="383.50">speed..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.10%)</title><rect x="60.9615%" y="373" width="0.0962%" height="15" fill="rgb(241,136,10)" fg:x="634" fg:w="1"/><text x="61.2115%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 8.85%)</title><rect x="55.0962%" y="389" width="8.8462%" height="15" fill="rgb(208,32,45)" fg:x="573" fg:w="92"/><text x="55.3462%" y="399.50">speed-0b1675..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (30 samples, 2.88%)</title><rect x="61.0577%" y="373" width="2.8846%" height="15" fill="rgb(207,135,9)" fg:x="635" fg:w="30"/><text x="61.3077%" y="383.50">sp..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (8 samples, 0.77%)</title><rect x="63.1731%" y="357" width="0.7692%" height="15" fill="rgb(206,86,44)" fg:x="657" fg:w="8"/><text x="63.4231%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (66 samples, 6.35%)</title><rect x="63.9423%" y="389" width="6.3462%" height="15" fill="rgb(245,177,15)" fg:x="665" fg:w="66"/><text x="64.1923%" y="399.50">speed-0b..</text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (57 samples, 5.48%)</title><rect x="64.8077%" y="373" width="5.4808%" height="15" fill="rgb(206,64,50)" fg:x="674" fg:w="57"/><text x="65.0577%" y="383.50">speed-0..</text></g><g><title> N]&gt; for [A (57 samples, 5.48%)</title><rect x="64.8077%" y="357" width="5.4808%" height="15" fill="rgb(234,36,40)" fg:x="674" fg:w="57"/><text x="65.0577%" y="367.50"> N]&gt; fo..</text></g><g><title> N]&gt;::eq (57 samples, 5.48%)</title><rect x="64.8077%" y="341" width="5.4808%" height="15" fill="rgb(213,64,8)" fg:x="674" fg:w="57"/><text x="65.0577%" y="351.50"> N]&gt;::eq</text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (40 samples, 3.85%)</title><rect x="66.4423%" y="325" width="3.8462%" height="15" fill="rgb(210,75,36)" fg:x="691" fg:w="40"/><text x="66.6923%" y="335.50">spee..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.96%)</title><rect x="69.3269%" y="309" width="0.9615%" height="15" fill="rgb(229,88,21)" fg:x="721" fg:w="10"/><text x="69.5769%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (3 samples, 0.29%)</title><rect x="70.2885%" y="389" width="0.2885%" height="15" fill="rgb(252,204,47)" fg:x="731" fg:w="3"/><text x="70.5385%" y="399.50"></text></g><g><title> N]&gt; for [A (3 samples, 0.29%)</title><rect x="70.2885%" y="373" width="0.2885%" height="15" fill="rgb(208,77,27)" fg:x="731" fg:w="3"/><text x="70.5385%" y="383.50"></text></g><g><title> N]&gt;::eq (3 samples, 0.29%)</title><rect x="70.2885%" y="357" width="0.2885%" height="15" fill="rgb(221,76,26)" fg:x="731" fg:w="3"/><text x="70.5385%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (273 samples, 26.25%)</title><rect x="44.5192%" y="405" width="26.2500%" height="15" fill="rgb(225,139,18)" fg:x="463" fg:w="273"/><text x="44.7692%" y="415.50">speed-0b1675bc7d978a4b`&lt;core::slice::iter:..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (2 samples, 0.19%)</title><rect x="70.5769%" y="389" width="0.1923%" height="15" fill="rgb(230,137,11)" fg:x="734" fg:w="2"/><text x="70.8269%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (1 samples, 0.10%)</title><rect x="70.7692%" y="405" width="0.0962%" height="15" fill="rgb(212,28,1)" fg:x="736" fg:w="1"/><text x="71.0192%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.10%)</title><rect x="70.8654%" y="389" width="0.0962%" height="15" fill="rgb(248,164,17)" fg:x="737" fg:w="1"/><text x="71.1154%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::slice::_&lt;impl [T]&gt;::iter (75 samples, 7.21%)</title><rect x="70.8654%" y="405" width="7.2115%" height="15" fill="rgb(222,171,42)" fg:x="737" fg:w="75"/><text x="71.1154%" y="415.50">speed-0b16..</text></g><g><title>speed-0b1675bc7d978a4b`core::slice::iter::Iter&lt;T&gt;::new (74 samples, 7.12%)</title><rect x="70.9615%" y="389" width="7.1154%" height="15" fill="rgb(243,84,45)" fg:x="738" fg:w="74"/><text x="71.2115%" y="399.50">speed-0b16..</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (61 samples, 5.87%)</title><rect x="72.2115%" y="373" width="5.8654%" height="15" fill="rgb(252,49,23)" fg:x="751" fg:w="61"/><text x="72.4615%" y="383.50">speed-0..</text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (440 samples, 42.31%)</title><rect x="36.2500%" y="421" width="42.3077%" height="15" fill="rgb(215,19,7)" fg:x="377" fg:w="440"/><text x="36.5000%" y="431.50">speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find</text></g><g><title>speed-0b1675bc7d978a4b`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.48%)</title><rect x="78.0769%" y="405" width="0.4808%" height="15" fill="rgb(238,81,41)" fg:x="812" fg:w="5"/><text x="78.3269%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::author (1 samples, 0.10%)</title><rect x="78.5577%" y="421" width="0.0962%" height="15" fill="rgb(210,199,37)" fg:x="817" fg:w="1"/><text x="78.8077%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (24 samples, 2.31%)</title><rect x="78.6538%" y="421" width="2.3077%" height="15" fill="rgb(244,192,49)" fg:x="818" fg:w="24"/><text x="78.9038%" y="431.50">s..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.19%)</title><rect x="82.6923%" y="373" width="0.1923%" height="15" fill="rgb(226,211,11)" fg:x="860" fg:w="2"/><text x="82.9423%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (40 samples, 3.85%)</title><rect x="82.8846%" y="373" width="3.8462%" height="15" fill="rgb(236,162,54)" fg:x="862" fg:w="40"/><text x="83.1346%" y="383.50">spee..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (18 samples, 1.73%)</title><rect x="85.0000%" y="357" width="1.7308%" height="15" fill="rgb(220,229,9)" fg:x="884" fg:w="18"/><text x="85.2500%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (61 samples, 5.87%)</title><rect x="80.9615%" y="421" width="5.8654%" height="15" fill="rgb(250,87,22)" fg:x="842" fg:w="61"/><text x="81.2115%" y="431.50">speed-0..</text></g><g><title> N]&gt; for [A (61 samples, 5.87%)</title><rect x="80.9615%" y="405" width="5.8654%" height="15" fill="rgb(239,43,17)" fg:x="842" fg:w="61"/><text x="81.2115%" y="415.50"> N]&gt; fo..</text></g><g><title> N]&gt;::eq (61 samples, 5.87%)</title><rect x="80.9615%" y="389" width="5.8654%" height="15" fill="rgb(231,177,25)" fg:x="842" fg:w="61"/><text x="81.2115%" y="399.50"> N]&gt;::eq</text></g><g><title>speed-0b1675bc7d978a4b`DYLD-STUB$$memcmp (1 samples, 0.10%)</title><rect x="86.7308%" y="373" width="0.0962%" height="15" fill="rgb(219,179,1)" fg:x="902" fg:w="1"/><text x="86.9808%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (13 samples, 1.25%)</title><rect x="86.8269%" y="421" width="1.2500%" height="15" fill="rgb(238,219,53)" fg:x="903" fg:w="13"/><text x="87.0769%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (8 samples, 0.77%)</title><rect x="88.0769%" y="421" width="0.7692%" height="15" fill="rgb(232,167,36)" fg:x="916" fg:w="8"/><text x="88.3269%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::option::Option&lt;T&gt;::unwrap (6 samples, 0.58%)</title><rect x="88.8462%" y="421" width="0.5769%" height="15" fill="rgb(244,19,51)" fg:x="924" fg:w="6"/><text x="89.0962%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (825 samples, 79.33%)</title><rect x="10.4808%" y="437" width="79.3269%" height="15" fill="rgb(224,6,22)" fg:x="109" fg:w="825"/><text x="10.7308%" y="447.50">speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate</text></g><g><title>speed-0b1675bc7d978a4b`core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.38%)</title><rect x="89.4231%" y="421" width="0.3846%" height="15" fill="rgb(224,145,5)" fg:x="930" fg:w="4"/><text x="89.6731%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (10 samples, 0.96%)</title><rect x="89.8077%" y="437" width="0.9615%" height="15" fill="rgb(234,130,49)" fg:x="934" fg:w="10"/><text x="90.0577%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B (1 samples, 0.10%)</title><rect x="90.7692%" y="437" width="0.0962%" height="15" fill="rgb(254,6,2)" fg:x="944" fg:w="1"/><text x="91.0192%" y="447.50"></text></g><g><title> N]&gt; for [A (1 samples, 0.10%)</title><rect x="90.7692%" y="421" width="0.0962%" height="15" fill="rgb(208,96,46)" fg:x="944" fg:w="1"/><text x="91.0192%" y="431.50"></text></g><g><title> N]&gt;::eq (1 samples, 0.10%)</title><rect x="90.7692%" y="405" width="0.0962%" height="15" fill="rgb(239,3,39)" fg:x="944" fg:w="1"/><text x="91.0192%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.10%)</title><rect x="90.8654%" y="437" width="0.0962%" height="15" fill="rgb(233,210,1)" fg:x="945" fg:w="1"/><text x="91.1154%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (5 samples, 0.48%)</title><rect x="90.9615%" y="437" width="0.4808%" height="15" fill="rgb(244,137,37)" fg:x="946" fg:w="5"/><text x="91.2115%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::option::Option&lt;T&gt;::unwrap (2 samples, 0.19%)</title><rect x="91.4423%" y="437" width="0.1923%" height="15" fill="rgb(240,136,2)" fg:x="951" fg:w="2"/><text x="91.6923%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.29%)</title><rect x="91.7308%" y="341" width="0.2885%" height="15" fill="rgb(239,18,37)" fg:x="954" fg:w="3"/><text x="91.9808%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.96%)</title><rect x="91.7308%" y="373" width="0.9615%" height="15" fill="rgb(218,185,22)" fg:x="954" fg:w="10"/><text x="91.9808%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.96%)</title><rect x="91.7308%" y="357" width="0.9615%" height="15" fill="rgb(225,218,4)" fg:x="954" fg:w="10"/><text x="91.9808%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.67%)</title><rect x="92.0192%" y="341" width="0.6731%" height="15" fill="rgb(230,182,32)" fg:x="957" fg:w="7"/><text x="92.2692%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.19%)</title><rect x="92.6923%" y="373" width="0.1923%" height="15" fill="rgb(242,56,43)" fg:x="964" fg:w="2"/><text x="92.9423%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.19%)</title><rect x="92.6923%" y="357" width="0.1923%" height="15" fill="rgb(233,99,24)" fg:x="964" fg:w="2"/><text x="92.9423%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="92.8846%" y="309" width="0.0962%" height="15" fill="rgb(234,209,42)" fg:x="966" fg:w="1"/><text x="93.1346%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="92.8846%" y="293" width="0.0962%" height="15" fill="rgb(227,7,12)" fg:x="966" fg:w="1"/><text x="93.1346%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.19%)</title><rect x="92.8846%" y="373" width="0.1923%" height="15" fill="rgb(245,203,43)" fg:x="966" fg:w="2"/><text x="93.1346%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.19%)</title><rect x="92.8846%" y="357" width="0.1923%" height="15" fill="rgb(238,205,33)" fg:x="966" fg:w="2"/><text x="93.1346%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::Hasher::write_u64 (2 samples, 0.19%)</title><rect x="92.8846%" y="341" width="0.1923%" height="15" fill="rgb(231,56,7)" fg:x="966" fg:w="2"/><text x="93.1346%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="92.8846%" y="325" width="0.1923%" height="15" fill="rgb(244,186,29)" fg:x="966" fg:w="2"/><text x="93.1346%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="92.9808%" y="309" width="0.0962%" height="15" fill="rgb(234,111,31)" fg:x="967" fg:w="1"/><text x="93.2308%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::make_insert_hash (15 samples, 1.44%)</title><rect x="91.7308%" y="405" width="1.4423%" height="15" fill="rgb(241,149,10)" fg:x="954" fg:w="15"/><text x="91.9808%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::BuildHasher::hash_one (15 samples, 1.44%)</title><rect x="91.7308%" y="389" width="1.4423%" height="15" fill="rgb(249,206,44)" fg:x="954" fg:w="15"/><text x="91.9808%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.10%)</title><rect x="93.0769%" y="373" width="0.0962%" height="15" fill="rgb(251,153,30)" fg:x="968" fg:w="1"/><text x="93.3269%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="93.5577%" y="357" width="0.0962%" height="15" fill="rgb(239,152,38)" fg:x="973" fg:w="1"/><text x="93.8077%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.48%)</title><rect x="93.6538%" y="357" width="0.4808%" height="15" fill="rgb(249,139,47)" fg:x="974" fg:w="5"/><text x="93.9038%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8 samples, 0.77%)</title><rect x="94.1346%" y="357" width="0.7692%" height="15" fill="rgb(244,64,35)" fg:x="979" fg:w="8"/><text x="94.3846%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::equivalent_key::_{{closure}} (8 samples, 0.77%)</title><rect x="94.1346%" y="341" width="0.7692%" height="15" fill="rgb(216,46,15)" fg:x="979" fg:w="8"/><text x="94.3846%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (8 samples, 0.77%)</title><rect x="94.1346%" y="325" width="0.7692%" height="15" fill="rgb(250,74,19)" fg:x="979" fg:w="8"/><text x="94.3846%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20 samples, 1.92%)</title><rect x="93.1731%" y="405" width="1.9231%" height="15" fill="rgb(249,42,33)" fg:x="969" fg:w="20"/><text x="93.4231%" y="415.50">s..</text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 1.83%)</title><rect x="93.2692%" y="389" width="1.8269%" height="15" fill="rgb(242,149,17)" fg:x="970" fg:w="19"/><text x="93.5192%" y="399.50">s..</text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 1.73%)</title><rect x="93.3654%" y="373" width="1.7308%" height="15" fill="rgb(244,29,21)" fg:x="971" fg:w="18"/><text x="93.6154%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::sse2::Group::match_byte (2 samples, 0.19%)</title><rect x="94.9038%" y="357" width="0.1923%" height="15" fill="rgb(220,130,37)" fg:x="987" fg:w="2"/><text x="95.1538%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.10%)</title><rect x="95.0000%" y="341" width="0.0962%" height="15" fill="rgb(211,67,2)" fg:x="988" fg:w="1"/><text x="95.2500%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.10%)</title><rect x="95.0000%" y="325" width="0.0962%" height="15" fill="rgb(235,68,52)" fg:x="988" fg:w="1"/><text x="95.2500%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="95.0962%" y="261" width="0.0962%" height="15" fill="rgb(246,142,3)" fg:x="989" fg:w="1"/><text x="95.3462%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.29%)</title><rect x="95.0962%" y="293" width="0.2885%" height="15" fill="rgb(241,25,7)" fg:x="989" fg:w="3"/><text x="95.3462%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.29%)</title><rect x="95.0962%" y="277" width="0.2885%" height="15" fill="rgb(242,119,39)" fg:x="989" fg:w="3"/><text x="95.3462%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.19%)</title><rect x="95.1923%" y="261" width="0.1923%" height="15" fill="rgb(241,98,45)" fg:x="990" fg:w="2"/><text x="95.4423%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.10%)</title><rect x="95.3846%" y="293" width="0.0962%" height="15" fill="rgb(254,28,30)" fg:x="992" fg:w="1"/><text x="95.6346%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.10%)</title><rect x="95.3846%" y="277" width="0.0962%" height="15" fill="rgb(241,142,54)" fg:x="992" fg:w="1"/><text x="95.6346%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (5 samples, 0.48%)</title><rect x="95.0962%" y="357" width="0.4808%" height="15" fill="rgb(222,85,15)" fg:x="989" fg:w="5"/><text x="95.3462%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::make_hasher::_{{closure}} (5 samples, 0.48%)</title><rect x="95.0962%" y="341" width="0.4808%" height="15" fill="rgb(210,85,47)" fg:x="989" fg:w="5"/><text x="95.3462%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::make_hash (5 samples, 0.48%)</title><rect x="95.0962%" y="325" width="0.4808%" height="15" fill="rgb(224,206,25)" fg:x="989" fg:w="5"/><text x="95.3462%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::BuildHasher::hash_one (5 samples, 0.48%)</title><rect x="95.0962%" y="309" width="0.4808%" height="15" fill="rgb(243,201,19)" fg:x="989" fg:w="5"/><text x="95.3462%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.10%)</title><rect x="95.4808%" y="293" width="0.0962%" height="15" fill="rgb(236,59,4)" fg:x="993" fg:w="1"/><text x="95.7308%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.10%)</title><rect x="95.4808%" y="277" width="0.0962%" height="15" fill="rgb(254,179,45)" fg:x="993" fg:w="1"/><text x="95.7308%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::Hasher::write_u64 (1 samples, 0.10%)</title><rect x="95.4808%" y="261" width="0.0962%" height="15" fill="rgb(226,14,10)" fg:x="993" fg:w="1"/><text x="95.7308%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="95.4808%" y="245" width="0.0962%" height="15" fill="rgb(244,27,41)" fg:x="993" fg:w="1"/><text x="95.7308%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::sip::u8to64_le (1 samples, 0.10%)</title><rect x="95.4808%" y="229" width="0.0962%" height="15" fill="rgb(235,35,32)" fg:x="993" fg:w="1"/><text x="95.7308%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.58%)</title><rect x="95.0962%" y="389" width="0.5769%" height="15" fill="rgb(218,68,31)" fg:x="989" fg:w="6"/><text x="95.3462%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.58%)</title><rect x="95.0962%" y="373" width="0.5769%" height="15" fill="rgb(207,120,37)" fg:x="989" fg:w="6"/><text x="95.3462%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.10%)</title><rect x="95.5769%" y="357" width="0.0962%" height="15" fill="rgb(227,98,0)" fg:x="994" fg:w="1"/><text x="95.8269%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.10%)</title><rect x="95.5769%" y="341" width="0.0962%" height="15" fill="rgb(207,7,3)" fg:x="994" fg:w="1"/><text x="95.8269%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::capacity_to_buckets (1 samples, 0.10%)</title><rect x="95.5769%" y="325" width="0.0962%" height="15" fill="rgb(206,98,19)" fg:x="994" fg:w="1"/><text x="95.8269%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (44 samples, 4.23%)</title><rect x="91.6346%" y="437" width="4.2308%" height="15" fill="rgb(217,5,26)" fg:x="953" fg:w="44"/><text x="91.8846%" y="447.50">speed..</text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 4.23%)</title><rect x="91.6346%" y="421" width="4.2308%" height="15" fill="rgb(235,190,38)" fg:x="953" fg:w="44"/><text x="91.8846%" y="431.50">speed..</text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.77%)</title><rect x="95.0962%" y="405" width="0.7692%" height="15" fill="rgb(247,86,24)" fg:x="989" fg:w="8"/><text x="95.3462%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.19%)</title><rect x="95.6731%" y="389" width="0.1923%" height="15" fill="rgb(205,101,16)" fg:x="995" fg:w="2"/><text x="95.9231%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="96.0577%" y="357" width="0.0962%" height="15" fill="rgb(246,168,33)" fg:x="999" fg:w="1"/><text x="96.3077%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="96.0577%" y="341" width="0.0962%" height="15" fill="rgb(231,114,1)" fg:x="999" fg:w="1"/><text x="96.3077%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.10%)</title><rect x="96.0577%" y="325" width="0.0962%" height="15" fill="rgb(207,184,53)" fg:x="999" fg:w="1"/><text x="96.3077%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::Hasher::write_length_prefix (2 samples, 0.19%)</title><rect x="96.1538%" y="309" width="0.1923%" height="15" fill="rgb(224,95,51)" fg:x="1000" fg:w="2"/><text x="96.4038%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::Hasher::write_usize (2 samples, 0.19%)</title><rect x="96.1538%" y="293" width="0.1923%" height="15" fill="rgb(212,188,45)" fg:x="1000" fg:w="2"/><text x="96.4038%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="96.1538%" y="277" width="0.1923%" height="15" fill="rgb(223,154,38)" fg:x="1000" fg:w="2"/><text x="96.4038%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="96.1538%" y="261" width="0.1923%" height="15" fill="rgb(251,22,52)" fg:x="1000" fg:w="2"/><text x="96.4038%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.19%)</title><rect x="96.4423%" y="261" width="0.1923%" height="15" fill="rgb(229,209,22)" fg:x="1003" fg:w="2"/><text x="96.6923%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::make_hash (7 samples, 0.67%)</title><rect x="96.0577%" y="389" width="0.6731%" height="15" fill="rgb(234,138,34)" fg:x="999" fg:w="7"/><text x="96.3077%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::BuildHasher::hash_one (7 samples, 0.67%)</title><rect x="96.0577%" y="373" width="0.6731%" height="15" fill="rgb(212,95,11)" fg:x="999" fg:w="7"/><text x="96.3077%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.58%)</title><rect x="96.1538%" y="357" width="0.5769%" height="15" fill="rgb(240,179,47)" fg:x="1000" fg:w="6"/><text x="96.4038%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::hash::Hash for [T (6 samples, 0.58%)</title><rect x="96.1538%" y="341" width="0.5769%" height="15" fill="rgb(240,163,11)" fg:x="1000" fg:w="6"/><text x="96.4038%" y="351.50"></text></g><g><title> N]&gt;::hash (6 samples, 0.58%)</title><rect x="96.1538%" y="325" width="0.5769%" height="15" fill="rgb(236,37,12)" fg:x="1000" fg:w="6"/><text x="96.4038%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.38%)</title><rect x="96.3462%" y="309" width="0.3846%" height="15" fill="rgb(232,164,16)" fg:x="1002" fg:w="4"/><text x="96.5962%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.38%)</title><rect x="96.3462%" y="293" width="0.3846%" height="15" fill="rgb(244,205,15)" fg:x="1002" fg:w="4"/><text x="96.5962%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.38%)</title><rect x="96.3462%" y="277" width="0.3846%" height="15" fill="rgb(223,117,47)" fg:x="1002" fg:w="4"/><text x="96.5962%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::sip::u8to64_le (1 samples, 0.10%)</title><rect x="96.6346%" y="261" width="0.0962%" height="15" fill="rgb(244,107,35)" fg:x="1005" fg:w="1"/><text x="96.8846%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.10%)</title><rect x="96.8269%" y="341" width="0.0962%" height="15" fill="rgb(205,140,8)" fg:x="1007" fg:w="1"/><text x="97.0769%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.10%)</title><rect x="96.9231%" y="325" width="0.0962%" height="15" fill="rgb(228,84,46)" fg:x="1008" fg:w="1"/><text x="97.1731%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (909 samples, 87.40%)</title><rect x="9.9038%" y="453" width="87.4038%" height="15" fill="rgb(254,188,9)" fg:x="103" fg:w="909"/><text x="10.1538%" y="463.50">speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply</text></g><g><title>speed-0b1675bc7d978a4b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (15 samples, 1.44%)</title><rect x="95.8654%" y="437" width="1.4423%" height="15" fill="rgb(206,112,54)" fg:x="997" fg:w="15"/><text x="96.1154%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (14 samples, 1.35%)</title><rect x="95.9615%" y="421" width="1.3462%" height="15" fill="rgb(216,84,49)" fg:x="998" fg:w="14"/><text x="96.2115%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (14 samples, 1.35%)</title><rect x="95.9615%" y="405" width="1.3462%" height="15" fill="rgb(214,194,35)" fg:x="998" fg:w="14"/><text x="96.2115%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (6 samples, 0.58%)</title><rect x="96.7308%" y="389" width="0.5769%" height="15" fill="rgb(249,28,3)" fg:x="1006" fg:w="6"/><text x="96.9808%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.58%)</title><rect x="96.7308%" y="373" width="0.5769%" height="15" fill="rgb(222,56,52)" fg:x="1006" fg:w="6"/><text x="96.9808%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 0.58%)</title><rect x="96.7308%" y="357" width="0.5769%" height="15" fill="rgb(245,217,50)" fg:x="1006" fg:w="6"/><text x="96.9808%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::raw::sse2::Group::match_byte (4 samples, 0.38%)</title><rect x="96.9231%" y="341" width="0.3846%" height="15" fill="rgb(213,201,24)" fg:x="1008" fg:w="4"/><text x="97.1731%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.29%)</title><rect x="97.0192%" y="325" width="0.2885%" height="15" fill="rgb(248,116,28)" fg:x="1009" fg:w="3"/><text x="97.2692%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.19%)</title><rect x="97.1154%" y="309" width="0.1923%" height="15" fill="rgb(219,72,43)" fg:x="1010" fg:w="2"/><text x="97.3654%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="97.3077%" y="341" width="0.0962%" height="15" fill="rgb(209,138,14)" fg:x="1012" fg:w="1"/><text x="97.5577%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="97.3077%" y="325" width="0.0962%" height="15" fill="rgb(222,18,33)" fg:x="1012" fg:w="1"/><text x="97.5577%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (2 samples, 0.19%)</title><rect x="97.3077%" y="437" width="0.1923%" height="15" fill="rgb(213,199,7)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.19%)</title><rect x="97.3077%" y="421" width="0.1923%" height="15" fill="rgb(250,110,10)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.19%)</title><rect x="97.3077%" y="405" width="0.1923%" height="15" fill="rgb(248,123,6)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.19%)</title><rect x="97.3077%" y="389" width="0.1923%" height="15" fill="rgb(206,91,31)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`hashbrown::map::make_hash (2 samples, 0.19%)</title><rect x="97.3077%" y="373" width="0.1923%" height="15" fill="rgb(211,154,13)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::BuildHasher::hash_one (2 samples, 0.19%)</title><rect x="97.3077%" y="357" width="0.1923%" height="15" fill="rgb(225,148,7)" fg:x="1012" fg:w="2"/><text x="97.5577%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.10%)</title><rect x="97.4038%" y="341" width="0.0962%" height="15" fill="rgb(220,160,43)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::hash::Hash for [T (1 samples, 0.10%)</title><rect x="97.4038%" y="325" width="0.0962%" height="15" fill="rgb(213,52,39)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="335.50"></text></g><g><title> N]&gt;::hash (1 samples, 0.10%)</title><rect x="97.4038%" y="309" width="0.0962%" height="15" fill="rgb(243,137,7)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::hash::impls::_&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.10%)</title><rect x="97.4038%" y="293" width="0.0962%" height="15" fill="rgb(230,79,13)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="97.4038%" y="277" width="0.0962%" height="15" fill="rgb(247,105,23)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="97.4038%" y="261" width="0.0962%" height="15" fill="rgb(223,179,41)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="97.4038%" y="245" width="0.0962%" height="15" fill="rgb(218,9,34)" fg:x="1013" fg:w="1"/><text x="97.6538%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.10%)</title><rect x="97.5000%" y="341" width="0.0962%" height="15" fill="rgb(222,106,8)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (1 samples, 0.10%)</title><rect x="97.5000%" y="325" width="0.0962%" height="15" fill="rgb(211,220,0)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.10%)</title><rect x="97.5000%" y="309" width="0.0962%" height="15" fill="rgb(229,52,16)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (1 samples, 0.10%)</title><rect x="97.5000%" y="293" width="0.0962%" height="15" fill="rgb(212,155,18)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.10%)</title><rect x="97.5000%" y="277" width="0.0962%" height="15" fill="rgb(242,21,14)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="97.5000%" y="261" width="0.0962%" height="15" fill="rgb(222,19,48)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::_{{closure}} (1 samples, 0.10%)</title><rect x="97.5000%" y="245" width="0.0962%" height="15" fill="rgb(232,45,27)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`generic_array::impls::_&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::_{{closure}} (1 samples, 0.10%)</title><rect x="97.5000%" y="229" width="0.0962%" height="15" fill="rgb(249,103,42)" fg:x="1014" fg:w="1"/><text x="97.7500%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="97.5962%" y="261" width="0.0962%" height="15" fill="rgb(246,81,33)" fg:x="1015" fg:w="1"/><text x="97.8462%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="97.5962%" y="309" width="0.1923%" height="15" fill="rgb(252,33,42)" fg:x="1015" fg:w="2"/><text x="97.8462%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="97.5962%" y="293" width="0.1923%" height="15" fill="rgb(209,212,41)" fg:x="1015" fg:w="2"/><text x="97.8462%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="97.5962%" y="277" width="0.1923%" height="15" fill="rgb(207,154,6)" fg:x="1015" fg:w="2"/><text x="97.8462%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (1 samples, 0.10%)</title><rect x="97.6923%" y="261" width="0.0962%" height="15" fill="rgb(223,64,47)" fg:x="1016" fg:w="1"/><text x="97.9423%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="97.6923%" y="245" width="0.0962%" height="15" fill="rgb(211,161,38)" fg:x="1016" fg:w="1"/><text x="97.9423%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="97.6923%" y="229" width="0.0962%" height="15" fill="rgb(219,138,40)" fg:x="1016" fg:w="1"/><text x="97.9423%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.10%)</title><rect x="97.7885%" y="245" width="0.0962%" height="15" fill="rgb(241,228,46)" fg:x="1017" fg:w="1"/><text x="98.0385%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.10%)</title><rect x="97.7885%" y="229" width="0.0962%" height="15" fill="rgb(223,209,38)" fg:x="1017" fg:w="1"/><text x="98.0385%" y="239.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.10%)</title><rect x="97.7885%" y="213" width="0.0962%" height="15" fill="rgb(236,164,45)" fg:x="1017" fg:w="1"/><text x="98.0385%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::result::Result&lt;T,E&gt;::map (1 samples, 0.10%)</title><rect x="97.7885%" y="197" width="0.0962%" height="15" fill="rgb(231,15,5)" fg:x="1017" fg:w="1"/><text x="98.0385%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (5 samples, 0.48%)</title><rect x="97.5000%" y="373" width="0.4808%" height="15" fill="rgb(252,35,15)" fg:x="1014" fg:w="5"/><text x="97.7500%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5 samples, 0.48%)</title><rect x="97.5000%" y="357" width="0.4808%" height="15" fill="rgb(248,181,18)" fg:x="1014" fg:w="5"/><text x="97.7500%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (4 samples, 0.38%)</title><rect x="97.5962%" y="341" width="0.3846%" height="15" fill="rgb(233,39,42)" fg:x="1015" fg:w="4"/><text x="97.8462%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (4 samples, 0.38%)</title><rect x="97.5962%" y="325" width="0.3846%" height="15" fill="rgb(238,110,33)" fg:x="1015" fg:w="4"/><text x="97.8462%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::_{{closure}} (2 samples, 0.19%)</title><rect x="97.7885%" y="309" width="0.1923%" height="15" fill="rgb(233,195,10)" fg:x="1017" fg:w="2"/><text x="98.0385%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (2 samples, 0.19%)</title><rect x="97.7885%" y="293" width="0.1923%" height="15" fill="rgb(254,105,3)" fg:x="1017" fg:w="2"/><text x="98.0385%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (2 samples, 0.19%)</title><rect x="97.7885%" y="277" width="0.1923%" height="15" fill="rgb(221,225,9)" fg:x="1017" fg:w="2"/><text x="98.0385%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (2 samples, 0.19%)</title><rect x="97.7885%" y="261" width="0.1923%" height="15" fill="rgb(224,227,45)" fg:x="1017" fg:w="2"/><text x="98.0385%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="97.8846%" y="245" width="0.0962%" height="15" fill="rgb(229,198,43)" fg:x="1018" fg:w="1"/><text x="98.1346%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.10%)</title><rect x="97.8846%" y="229" width="0.0962%" height="15" fill="rgb(206,209,35)" fg:x="1018" fg:w="1"/><text x="98.1346%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::finalize (7 samples, 0.67%)</title><rect x="97.5000%" y="405" width="0.6731%" height="15" fill="rgb(245,195,53)" fg:x="1014" fg:w="7"/><text x="97.7500%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`digest::FixedOutput::finalize_fixed (7 samples, 0.67%)</title><rect x="97.5000%" y="389" width="0.6731%" height="15" fill="rgb(240,92,26)" fg:x="1014" fg:w="7"/><text x="97.7500%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="97.9808%" y="373" width="0.1923%" height="15" fill="rgb(207,40,23)" fg:x="1019" fg:w="2"/><text x="98.2308%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="97.9808%" y="357" width="0.1923%" height="15" fill="rgb(223,111,35)" fg:x="1019" fg:w="2"/><text x="98.2308%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="97.9808%" y="341" width="0.1923%" height="15" fill="rgb(229,147,28)" fg:x="1019" fg:w="2"/><text x="98.2308%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (2 samples, 0.19%)</title><rect x="97.9808%" y="325" width="0.1923%" height="15" fill="rgb(211,29,28)" fg:x="1019" fg:w="2"/><text x="98.2308%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2 samples, 0.19%)</title><rect x="97.9808%" y="309" width="0.1923%" height="15" fill="rgb(228,72,33)" fg:x="1019" fg:w="2"/><text x="98.2308%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="98.0769%" y="293" width="0.0962%" height="15" fill="rgb(205,214,31)" fg:x="1020" fg:w="1"/><text x="98.3269%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::_{{closure}} (1 samples, 0.10%)</title><rect x="98.0769%" y="277" width="0.0962%" height="15" fill="rgb(224,111,15)" fg:x="1020" fg:w="1"/><text x="98.3269%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::new (2 samples, 0.19%)</title><rect x="98.1731%" y="405" width="0.1923%" height="15" fill="rgb(253,21,26)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.19%)</title><rect x="98.1731%" y="389" width="0.1923%" height="15" fill="rgb(245,139,43)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (2 samples, 0.19%)</title><rect x="98.1731%" y="373" width="0.1923%" height="15" fill="rgb(252,170,7)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.19%)</title><rect x="98.1731%" y="357" width="0.1923%" height="15" fill="rgb(231,118,14)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::for_each (2 samples, 0.19%)</title><rect x="98.1731%" y="341" width="0.1923%" height="15" fill="rgb(238,83,0)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.19%)</title><rect x="98.1731%" y="325" width="0.1923%" height="15" fill="rgb(221,39,39)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::fold (2 samples, 0.19%)</title><rect x="98.1731%" y="309" width="0.1923%" height="15" fill="rgb(222,119,46)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="98.1731%" y="293" width="0.1923%" height="15" fill="rgb(222,165,49)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.19%)</title><rect x="98.1731%" y="277" width="0.1923%" height="15" fill="rgb(219,113,52)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.19%)</title><rect x="98.1731%" y="261" width="0.1923%" height="15" fill="rgb(214,7,15)" fg:x="1021" fg:w="2"/><text x="98.4231%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.10%)</title><rect x="98.3654%" y="261" width="0.0962%" height="15" fill="rgb(235,32,4)" fg:x="1023" fg:w="1"/><text x="98.6154%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.10%)</title><rect x="98.3654%" y="245" width="0.0962%" height="15" fill="rgb(238,90,54)" fg:x="1023" fg:w="1"/><text x="98.6154%" y="255.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.10%)</title><rect x="98.3654%" y="229" width="0.0962%" height="15" fill="rgb(213,208,19)" fg:x="1023" fg:w="1"/><text x="98.6154%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::result::Result&lt;T,E&gt;::map (1 samples, 0.10%)</title><rect x="98.3654%" y="213" width="0.0962%" height="15" fill="rgb(233,156,4)" fg:x="1023" fg:w="1"/><text x="98.6154%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;D as digest::digest::Digest&gt;::update (2 samples, 0.19%)</title><rect x="98.3654%" y="405" width="0.1923%" height="15" fill="rgb(207,194,5)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (2 samples, 0.19%)</title><rect x="98.3654%" y="389" width="0.1923%" height="15" fill="rgb(206,111,30)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (2 samples, 0.19%)</title><rect x="98.3654%" y="373" width="0.1923%" height="15" fill="rgb(243,70,54)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::_{{closure}} (2 samples, 0.19%)</title><rect x="98.3654%" y="357" width="0.1923%" height="15" fill="rgb(242,28,8)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.19%)</title><rect x="98.3654%" y="341" width="0.1923%" height="15" fill="rgb(219,106,18)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.19%)</title><rect x="98.3654%" y="325" width="0.1923%" height="15" fill="rgb(244,222,10)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::compress256 (2 samples, 0.19%)</title><rect x="98.3654%" y="309" width="0.1923%" height="15" fill="rgb(236,179,52)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::x86::compress (2 samples, 0.19%)</title><rect x="98.3654%" y="293" width="0.1923%" height="15" fill="rgb(213,23,39)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::compress (2 samples, 0.19%)</title><rect x="98.3654%" y="277" width="0.1923%" height="15" fill="rgb(238,48,10)" fg:x="1023" fg:w="2"/><text x="98.6154%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.10%)</title><rect x="98.4615%" y="261" width="0.0962%" height="15" fill="rgb(251,196,23)" fg:x="1024" fg:w="1"/><text x="98.7115%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.10%)</title><rect x="98.4615%" y="245" width="0.0962%" height="15" fill="rgb(250,152,24)" fg:x="1024" fg:w="1"/><text x="98.7115%" y="255.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.10%)</title><rect x="98.6538%" y="165" width="0.0962%" height="15" fill="rgb(209,150,17)" fg:x="1026" fg:w="1"/><text x="98.9038%" y="175.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.19%)</title><rect x="98.6538%" y="213" width="0.1923%" height="15" fill="rgb(234,202,34)" fg:x="1026" fg:w="2"/><text x="98.9038%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::_&lt;impl core::fmt::Debug for u8&gt;::fmt (2 samples, 0.19%)</title><rect x="98.6538%" y="197" width="0.1923%" height="15" fill="rgb(253,148,53)" fg:x="1026" fg:w="2"/><text x="98.9038%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::num::imp::_&lt;impl core::fmt::Display for u8&gt;::fmt (2 samples, 0.19%)</title><rect x="98.6538%" y="181" width="0.1923%" height="15" fill="rgb(218,129,16)" fg:x="1026" fg:w="2"/><text x="98.9038%" y="191.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="98.7500%" y="165" width="0.0962%" height="15" fill="rgb(216,85,19)" fg:x="1027" fg:w="1"/><text x="99.0000%" y="175.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format (4 samples, 0.38%)</title><rect x="98.5577%" y="405" width="0.3846%" height="15" fill="rgb(235,228,7)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::option::Option&lt;T&gt;::map_or_else (4 samples, 0.38%)</title><rect x="98.5577%" y="389" width="0.3846%" height="15" fill="rgb(245,175,0)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::_{{closure}} (4 samples, 0.38%)</title><rect x="98.5577%" y="373" width="0.3846%" height="15" fill="rgb(208,168,36)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::fmt::format::format_inner (4 samples, 0.38%)</title><rect x="98.5577%" y="357" width="0.3846%" height="15" fill="rgb(246,171,24)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::write (4 samples, 0.38%)</title><rect x="98.5577%" y="341" width="0.3846%" height="15" fill="rgb(215,142,24)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::array::_&lt;impl core::fmt::Debug for [T (4 samples, 0.38%)</title><rect x="98.5577%" y="325" width="0.3846%" height="15" fill="rgb(250,187,7)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="335.50"></text></g><g><title> N]&gt;::fmt (4 samples, 0.38%)</title><rect x="98.5577%" y="309" width="0.3846%" height="15" fill="rgb(228,66,33)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="98.5577%" y="293" width="0.3846%" height="15" fill="rgb(234,215,21)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;[T] as core::fmt::Debug&gt;::fmt (4 samples, 0.38%)</title><rect x="98.5577%" y="277" width="0.3846%" height="15" fill="rgb(222,191,20)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugList::entries (4 samples, 0.38%)</title><rect x="98.5577%" y="261" width="0.3846%" height="15" fill="rgb(245,79,54)" fg:x="1025" fg:w="4"/><text x="98.8077%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugSet::entry (3 samples, 0.29%)</title><rect x="98.6538%" y="245" width="0.2885%" height="15" fill="rgb(240,10,37)" fg:x="1026" fg:w="3"/><text x="98.9038%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::fmt::builders::DebugInner::entry (3 samples, 0.29%)</title><rect x="98.6538%" y="229" width="0.2885%" height="15" fill="rgb(214,192,32)" fg:x="1026" fg:w="3"/><text x="98.9038%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="98.8462%" y="213" width="0.0962%" height="15" fill="rgb(209,36,54)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="223.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="98.8462%" y="197" width="0.0962%" height="15" fill="rgb(220,10,11)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="207.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="98.8462%" y="181" width="0.0962%" height="15" fill="rgb(221,106,17)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.10%)</title><rect x="98.8462%" y="165" width="0.0962%" height="15" fill="rgb(251,142,44)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.10%)</title><rect x="98.8462%" y="149" width="0.0962%" height="15" fill="rgb(238,13,15)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.10%)</title><rect x="98.8462%" y="133" width="0.0962%" height="15" fill="rgb(208,107,27)" fg:x="1028" fg:w="1"/><text x="99.0962%" y="143.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (18 samples, 1.73%)</title><rect x="97.3077%" y="453" width="1.7308%" height="15" fill="rgb(205,136,37)" fg:x="1012" fg:w="18"/><text x="97.5577%" y="463.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::new (16 samples, 1.54%)</title><rect x="97.5000%" y="437" width="1.5385%" height="15" fill="rgb(250,205,27)" fg:x="1014" fg:w="16"/><text x="97.7500%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::op::Op&lt;T&gt;::hash (16 samples, 1.54%)</title><rect x="97.5000%" y="421" width="1.5385%" height="15" fill="rgb(210,80,43)" fg:x="1014" fg:w="16"/><text x="97.7500%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.10%)</title><rect x="98.9423%" y="405" width="0.0962%" height="15" fill="rgb(247,160,36)" fg:x="1029" fg:w="1"/><text x="99.1923%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.10%)</title><rect x="98.9423%" y="389" width="0.0962%" height="15" fill="rgb(234,13,49)" fg:x="1029" fg:w="1"/><text x="99.1923%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.9423%" y="373" width="0.0962%" height="15" fill="rgb(234,122,0)" fg:x="1029" fg:w="1"/><text x="99.1923%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.10%)</title><rect x="98.9423%" y="357" width="0.0962%" height="15" fill="rgb(207,146,38)" fg:x="1029" fg:w="1"/><text x="99.1923%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.10%)</title><rect x="98.9423%" y="341" width="0.0962%" height="15" fill="rgb(207,177,25)" fg:x="1029" fg:w="1"/><text x="99.1923%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0385%" y="341" width="0.0962%" height="15" fill="rgb(211,178,42)" fg:x="1030" fg:w="1"/><text x="99.2885%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.19%)</title><rect x="99.0385%" y="389" width="0.1923%" height="15" fill="rgb(230,69,54)" fg:x="1030" fg:w="2"/><text x="99.2885%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.19%)</title><rect x="99.0385%" y="373" width="0.1923%" height="15" fill="rgb(214,135,41)" fg:x="1030" fg:w="2"/><text x="99.2885%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.19%)</title><rect x="99.0385%" y="357" width="0.1923%" height="15" fill="rgb(237,67,25)" fg:x="1030" fg:w="2"/><text x="99.2885%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="99.1346%" y="341" width="0.0962%" height="15" fill="rgb(222,189,50)" fg:x="1031" fg:w="1"/><text x="99.3846%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.10%)</title><rect x="99.1346%" y="325" width="0.0962%" height="15" fill="rgb(245,148,34)" fg:x="1031" fg:w="1"/><text x="99.3846%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (1 samples, 0.10%)</title><rect x="99.1346%" y="309" width="0.0962%" height="15" fill="rgb(222,29,6)" fg:x="1031" fg:w="1"/><text x="99.3846%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="99.4231%" y="261" width="0.0962%" height="15" fill="rgb(221,189,43)" fg:x="1034" fg:w="1"/><text x="99.6731%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.10%)</title><rect x="99.4231%" y="245" width="0.0962%" height="15" fill="rgb(207,36,27)" fg:x="1034" fg:w="1"/><text x="99.6731%" y="255.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="99.4231%" y="229" width="0.0962%" height="15" fill="rgb(217,90,24)" fg:x="1034" fg:w="1"/><text x="99.6731%" y="239.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="99.4231%" y="277" width="0.1923%" height="15" fill="rgb(224,66,35)" fg:x="1034" fg:w="2"/><text x="99.6731%" y="287.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.10%)</title><rect x="99.5192%" y="261" width="0.0962%" height="15" fill="rgb(221,13,50)" fg:x="1035" fg:w="1"/><text x="99.7692%" y="271.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::all (9 samples, 0.87%)</title><rect x="99.0385%" y="453" width="0.8654%" height="15" fill="rgb(236,68,49)" fg:x="1030" fg:w="9"/><text x="99.2885%" y="463.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.87%)</title><rect x="99.0385%" y="437" width="0.8654%" height="15" fill="rgb(229,146,28)" fg:x="1030" fg:w="9"/><text x="99.2885%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (9 samples, 0.87%)</title><rect x="99.0385%" y="421" width="0.8654%" height="15" fill="rgb(225,31,38)" fg:x="1030" fg:w="9"/><text x="99.2885%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts::_{{closure}}::_{{closure}} (9 samples, 0.87%)</title><rect x="99.0385%" y="405" width="0.8654%" height="15" fill="rgb(250,208,3)" fg:x="1030" fg:w="9"/><text x="99.2885%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::view (7 samples, 0.67%)</title><rect x="99.2308%" y="389" width="0.6731%" height="15" fill="rgb(246,54,23)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::iter::traits::iterator::Iterator::collect (7 samples, 0.67%)</title><rect x="99.2308%" y="373" width="0.6731%" height="15" fill="rgb(243,76,11)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.67%)</title><rect x="99.2308%" y="357" width="0.6731%" height="15" fill="rgb(245,21,50)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.67%)</title><rect x="99.2308%" y="341" width="0.6731%" height="15" fill="rgb(228,9,43)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="351.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7 samples, 0.67%)</title><rect x="99.2308%" y="325" width="0.6731%" height="15" fill="rgb(208,100,47)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="335.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.67%)</title><rect x="99.2308%" y="309" width="0.6731%" height="15" fill="rgb(232,26,8)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="319.50"></text></g><g><title>speed-0b1675bc7d978a4b`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.67%)</title><rect x="99.2308%" y="293" width="0.6731%" height="15" fill="rgb(216,166,38)" fg:x="1032" fg:w="7"/><text x="99.4808%" y="303.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.29%)</title><rect x="99.6154%" y="277" width="0.2885%" height="15" fill="rgb(251,202,51)" fg:x="1036" fg:w="3"/><text x="99.8654%" y="287.50"></text></g><g><title>all (1,040 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(254,216,34)" fg:x="0" fg:w="1040"/><text x="0.2500%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,039 samples, 99.90%)</title><rect x="0.0962%" y="693" width="99.9038%" height="15" fill="rgb(251,32,27)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="703.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,039 samples, 99.90%)</title><rect x="0.0962%" y="677" width="99.9038%" height="15" fill="rgb(208,127,28)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="687.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>speed-0b1675bc7d978a4b`std::sys::unix::thread::Thread::new::thread_start (1,039 samples, 99.90%)</title><rect x="0.0962%" y="661" width="99.9038%" height="15" fill="rgb(224,137,22)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="671.50">speed-0b1675bc7d978a4b`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,039 samples, 99.90%)</title><rect x="0.0962%" y="645" width="99.9038%" height="15" fill="rgb(254,70,32)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="655.50">speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-0b1675bc7d978a4b`std::sys_common::backtrace::__rust_begin_short_backtrace (1,039 samples, 99.90%)</title><rect x="0.0962%" y="629" width="99.9038%" height="15" fill="rgb(229,75,37)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="639.50">speed-0b1675bc7d978a4b`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>speed-0b1675bc7d978a4b`test::run_test::run_test_inner::_{{closure}} (1,039 samples, 99.90%)</title><rect x="0.0962%" y="613" width="99.9038%" height="15" fill="rgb(252,64,23)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="623.50">speed-0b1675bc7d978a4b`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>speed-0b1675bc7d978a4b`test::__rust_begin_short_backtrace (1,039 samples, 99.90%)</title><rect x="0.0962%" y="597" width="99.9038%" height="15" fill="rgb(232,162,48)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="607.50">speed-0b1675bc7d978a4b`test::__rust_begin_short_backtrace</text></g><g><title>speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,039 samples, 99.90%)</title><rect x="0.0962%" y="581" width="99.9038%" height="15" fill="rgb(246,160,12)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="591.50">speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-0b1675bc7d978a4b`test::__rust_begin_short_backtrace (1,039 samples, 99.90%)</title><rect x="0.0962%" y="565" width="99.9038%" height="15" fill="rgb(247,166,0)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="575.50">speed-0b1675bc7d978a4b`test::__rust_begin_short_backtrace</text></g><g><title>speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once (1,039 samples, 99.90%)</title><rect x="0.0962%" y="549" width="99.9038%" height="15" fill="rgb(249,219,21)" fg:x="1" fg:w="1039"/><text x="0.3462%" y="559.50">speed-0b1675bc7d978a4b`core::ops::function::FnOnce::call_once</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts::_{{closure}} (940 samples, 90.38%)</title><rect x="9.6154%" y="533" width="90.3846%" height="15" fill="rgb(205,209,3)" fg:x="100" fg:w="940"/><text x="9.8654%" y="543.50">speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts::_{{closure}}</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts (940 samples, 90.38%)</title><rect x="9.6154%" y="517" width="90.3846%" height="15" fill="rgb(243,44,1)" fg:x="100" fg:w="940"/><text x="9.8654%" y="527.50">speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::Bencher::iter (940 samples, 90.38%)</title><rect x="9.6154%" y="501" width="90.3846%" height="15" fill="rgb(206,159,16)" fg:x="100" fg:w="940"/><text x="9.8654%" y="511.50">speed-0b1675bc7d978a4b`test::bench::Bencher::iter</text></g><g><title>speed-0b1675bc7d978a4b`test::bench::ns_iter_inner (940 samples, 90.38%)</title><rect x="9.6154%" y="485" width="90.3846%" height="15" fill="rgb(244,77,30)" fg:x="100" fg:w="940"/><text x="9.8654%" y="495.50">speed-0b1675bc7d978a4b`test::bench::ns_iter_inner</text></g><g><title>speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts::_{{closure}} (940 samples, 90.38%)</title><rect x="9.6154%" y="469" width="90.3846%" height="15" fill="rgb(218,69,12)" fg:x="100" fg:w="940"/><text x="9.8654%" y="479.50">speed-0b1675bc7d978a4b`speed::bench_insert_many_agents_conflicts::_{{closure}}</text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="99.9038%" y="453" width="0.0962%" height="15" fill="rgb(212,87,7)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="463.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="99.9038%" y="437" width="0.0962%" height="15" fill="rgb(245,114,25)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="447.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;[bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;]&gt; (1 samples, 0.10%)</title><rect x="99.9038%" y="421" width="0.0962%" height="15" fill="rgb(210,61,42)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="431.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt; (1 samples, 0.10%)</title><rect x="99.9038%" y="405" width="0.0962%" height="15" fill="rgb(211,52,33)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="415.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bft_json_crdt::op::Op&lt;usize&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="99.9038%" y="389" width="0.0962%" height="15" fill="rgb(234,58,33)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="399.50"></text></g><g><title>speed-0b1675bc7d978a4b`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bft_json_crdt::op::Op&lt;usize&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="99.9038%" y="373" width="0.0962%" height="15" fill="rgb(220,115,36)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="383.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="99.9038%" y="357" width="0.0962%" height="15" fill="rgb(243,153,54)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="367.50"></text></g><g><title>speed-0b1675bc7d978a4b`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="99.9038%" y="341" width="0.0962%" height="15" fill="rgb(251,47,18)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.10%)</title><rect x="99.9038%" y="325" width="0.0962%" height="15" fill="rgb(242,102,42)" fg:x="1039" fg:w="1"/><text x="100.1538%" y="335.50"></text></g></svg></svg>