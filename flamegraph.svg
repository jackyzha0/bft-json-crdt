<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="5982"><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0167%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0167%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0167%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0167%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0167%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0167%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (2 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0334%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>speed-20cf170cf9340871`main (2 samples, 0.03%)</title><rect x="0.0000%" y="501" width="0.0334%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="511.50"></text></g><g><title>speed-20cf170cf9340871`std::rt::lang_start (2 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0334%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="495.50"></text></g><g><title>speed-20cf170cf9340871`std::rt::lang_start_internal (2 samples, 0.03%)</title><rect x="0.0000%" y="469" width="0.0334%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>speed-20cf170cf9340871`std::rt::lang_start::_{{closure}} (2 samples, 0.03%)</title><rect x="0.0000%" y="453" width="0.0334%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="463.50"></text></g><g><title>speed-20cf170cf9340871`std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.03%)</title><rect x="0.0000%" y="437" width="0.0334%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="447.50"></text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="0.0000%" y="421" width="0.0334%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="431.50"></text></g><g><title>speed-20cf170cf9340871`speed::main (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0334%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>speed-20cf170cf9340871`test::test_main_static (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0334%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>speed-20cf170cf9340871`test::test_main (1 samples, 0.02%)</title><rect x="0.0167%" y="373" width="0.0167%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2667%" y="383.50"></text></g><g><title>speed-20cf170cf9340871`test::console::run_tests_console (1 samples, 0.02%)</title><rect x="0.0167%" y="357" width="0.0167%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2667%" y="367.50"></text></g><g><title>speed-20cf170cf9340871`test::run_tests (1 samples, 0.02%)</title><rect x="0.0167%" y="341" width="0.0167%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2667%" y="351.50"></text></g><g><title>speed-20cf170cf9340871`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (1 samples, 0.02%)</title><rect x="0.0167%" y="325" width="0.0167%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2667%" y="335.50"></text></g><g><title>speed-20cf170cf9340871`std::sync::mpsc::blocking::WaitToken::wait_max_until (1 samples, 0.02%)</title><rect x="0.0167%" y="309" width="0.0167%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2667%" y="319.50"></text></g><g><title>speed-20cf170cf9340871`std::thread::park_timeout (1 samples, 0.02%)</title><rect x="0.0167%" y="293" width="0.0167%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2667%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.02%)</title><rect x="0.0167%" y="277" width="0.0167%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.2667%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0334%" y="517" width="0.0167%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.2834%" y="527.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.27%)</title><rect x="0.0669%" y="229" width="0.2675%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="16"/><text x="0.3169%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (384 samples, 6.42%)</title><rect x="8.8098%" y="197" width="6.4193%" height="15" fill="rgb(241,131,45)" fg:x="527" fg:w="384"/><text x="9.0598%" y="207.50">speed-20..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (20 samples, 0.33%)</title><rect x="15.2290%" y="197" width="0.3343%" height="15" fill="rgb(249,31,29)" fg:x="911" fg:w="20"/><text x="15.4790%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,083 samples, 18.10%)</title><rect x="4.4801%" y="213" width="18.1043%" height="15" fill="rgb(225,111,53)" fg:x="268" fg:w="1083"/><text x="4.7301%" y="223.50">speed-20cf170cf9340871`&lt;core..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (420 samples, 7.02%)</title><rect x="15.5634%" y="197" width="7.0211%" height="15" fill="rgb(238,160,17)" fg:x="931" fg:w="420"/><text x="15.8134%" y="207.50">speed-20c..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (130 samples, 2.17%)</title><rect x="20.4112%" y="181" width="2.1732%" height="15" fill="rgb(214,148,48)" fg:x="1221" fg:w="130"/><text x="20.6612%" y="191.50">s..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (11 samples, 0.18%)</title><rect x="25.5600%" y="197" width="0.1839%" height="15" fill="rgb(232,36,49)" fg:x="1529" fg:w="11"/><text x="25.8100%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (871 samples, 14.56%)</title><rect x="22.5844%" y="213" width="14.5603%" height="15" fill="rgb(209,103,24)" fg:x="1351" fg:w="871"/><text x="22.8344%" y="223.50">speed-20cf170cf9340871..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (682 samples, 11.40%)</title><rect x="25.7439%" y="197" width="11.4009%" height="15" fill="rgb(229,88,8)" fg:x="1540" fg:w="682"/><text x="25.9939%" y="207.50">speed-20cf170cf93..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (245 samples, 4.10%)</title><rect x="33.0491%" y="181" width="4.0956%" height="15" fill="rgb(213,181,19)" fg:x="1977" fg:w="245"/><text x="33.2991%" y="191.50">spee..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (23 samples, 0.38%)</title><rect x="37.1448%" y="213" width="0.3845%" height="15" fill="rgb(254,191,54)" fg:x="2222" fg:w="23"/><text x="37.3948%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (18 samples, 0.30%)</title><rect x="37.5293%" y="213" width="0.3009%" height="15" fill="rgb(241,83,37)" fg:x="2245" fg:w="18"/><text x="37.7793%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,258 samples, 37.75%)</title><rect x="0.3343%" y="229" width="37.7466%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="2258"/><text x="0.5843%" y="239.50">speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::i..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (15 samples, 0.25%)</title><rect x="37.8302%" y="213" width="0.2508%" height="15" fill="rgb(226,3,54)" fg:x="2263" fg:w="15"/><text x="38.0802%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (2,295 samples, 38.37%)</title><rect x="0.0669%" y="245" width="38.3651%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="2295"/><text x="0.3169%" y="255.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::f..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (21 samples, 0.35%)</title><rect x="38.0809%" y="229" width="0.3511%" height="15" fill="rgb(238,167,29)" fg:x="2278" fg:w="21"/><text x="38.3309%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::insert (2 samples, 0.03%)</title><rect x="38.4487%" y="229" width="0.0334%" height="15" fill="rgb(232,182,51)" fg:x="2300" fg:w="2"/><text x="38.6987%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="38.4654%" y="213" width="0.0167%" height="15" fill="rgb(231,60,39)" fg:x="2301" fg:w="1"/><text x="38.7154%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.30%)</title><rect x="38.4821%" y="213" width="0.3009%" height="15" fill="rgb(208,69,12)" fg:x="2302" fg:w="18"/><text x="38.7321%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (393 samples, 6.57%)</title><rect x="48.0441%" y="181" width="6.5697%" height="15" fill="rgb(235,93,37)" fg:x="2874" fg:w="393"/><text x="48.2941%" y="191.50">speed-20c..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (22 samples, 0.37%)</title><rect x="54.6138%" y="181" width="0.3678%" height="15" fill="rgb(213,116,39)" fg:x="3267" fg:w="22"/><text x="54.8638%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,092 samples, 18.25%)</title><rect x="43.4470%" y="197" width="18.2548%" height="15" fill="rgb(222,207,29)" fg:x="2599" fg:w="1092"/><text x="43.6970%" y="207.50">speed-20cf170cf9340871`&lt;core..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (402 samples, 6.72%)</title><rect x="54.9816%" y="181" width="6.7202%" height="15" fill="rgb(206,96,30)" fg:x="3289" fg:w="402"/><text x="55.2316%" y="191.50">speed-20c..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (128 samples, 2.14%)</title><rect x="59.5620%" y="165" width="2.1398%" height="15" fill="rgb(218,138,4)" fg:x="3563" fg:w="128"/><text x="59.8120%" y="175.50">s..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (4 samples, 0.07%)</title><rect x="64.7609%" y="181" width="0.0669%" height="15" fill="rgb(250,191,14)" fg:x="3874" fg:w="4"/><text x="65.0109%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (877 samples, 14.66%)</title><rect x="61.7018%" y="197" width="14.6606%" height="15" fill="rgb(239,60,40)" fg:x="3691" fg:w="877"/><text x="61.9518%" y="207.50">speed-20cf170cf9340871..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (690 samples, 11.53%)</title><rect x="64.8278%" y="181" width="11.5346%" height="15" fill="rgb(206,27,48)" fg:x="3878" fg:w="690"/><text x="65.0778%" y="191.50">speed-20cf170cf93..</text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (279 samples, 4.66%)</title><rect x="71.6984%" y="165" width="4.6640%" height="15" fill="rgb(225,35,8)" fg:x="4289" fg:w="279"/><text x="71.9484%" y="175.50">speed..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (13 samples, 0.22%)</title><rect x="76.3624%" y="197" width="0.2173%" height="15" fill="rgb(250,213,24)" fg:x="4568" fg:w="13"/><text x="76.6124%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (23 samples, 0.38%)</title><rect x="76.5797%" y="197" width="0.3845%" height="15" fill="rgb(247,123,22)" fg:x="4581" fg:w="23"/><text x="76.8297%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,307 samples, 38.57%)</title><rect x="38.7830%" y="213" width="38.5657%" height="15" fill="rgb(231,138,38)" fg:x="2320" fg:w="2307"/><text x="39.0330%" y="223.50">speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::ite..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (23 samples, 0.38%)</title><rect x="76.9642%" y="197" width="0.3845%" height="15" fill="rgb(231,145,46)" fg:x="4604" fg:w="23"/><text x="77.2142%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (2,352 samples, 39.32%)</title><rect x="38.4320%" y="245" width="39.3180%" height="15" fill="rgb(251,118,11)" fg:x="2299" fg:w="2352"/><text x="38.6820%" y="255.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::in..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (2,349 samples, 39.27%)</title><rect x="38.4821%" y="229" width="39.2678%" height="15" fill="rgb(217,147,25)" fg:x="2302" fg:w="2349"/><text x="38.7321%" y="239.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::fi..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (24 samples, 0.40%)</title><rect x="77.3487%" y="213" width="0.4012%" height="15" fill="rgb(247,81,37)" fg:x="4627" fg:w="24"/><text x="77.5987%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::is_none (1 samples, 0.02%)</title><rect x="77.7499%" y="245" width="0.0167%" height="15" fill="rgb(209,12,38)" fg:x="4651" fg:w="1"/><text x="77.9999%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="77.7666%" y="197" width="0.0167%" height="15" fill="rgb(227,1,9)" fg:x="4652" fg:w="1"/><text x="78.0166%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_insert_hash (2 samples, 0.03%)</title><rect x="77.7666%" y="213" width="0.0334%" height="15" fill="rgb(248,47,43)" fg:x="4652" fg:w="2"/><text x="78.0166%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="77.7834%" y="197" width="0.0167%" height="15" fill="rgb(221,10,30)" fg:x="4653" fg:w="1"/><text x="78.0334%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="77.7834%" y="181" width="0.0167%" height="15" fill="rgb(210,229,1)" fg:x="4653" fg:w="1"/><text x="78.0334%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="77.7834%" y="165" width="0.0167%" height="15" fill="rgb(222,148,37)" fg:x="4653" fg:w="1"/><text x="78.0334%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="77.7834%" y="149" width="0.0167%" height="15" fill="rgb(234,67,33)" fg:x="4653" fg:w="1"/><text x="78.0334%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.03%)</title><rect x="77.8335%" y="165" width="0.0334%" height="15" fill="rgb(247,98,35)" fg:x="4656" fg:w="2"/><text x="78.0835%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.12%)</title><rect x="77.7666%" y="245" width="0.1170%" height="15" fill="rgb(247,138,52)" fg:x="4652" fg:w="7"/><text x="78.0166%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.12%)</title><rect x="77.7666%" y="229" width="0.1170%" height="15" fill="rgb(213,79,30)" fg:x="4652" fg:w="7"/><text x="78.0166%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5 samples, 0.08%)</title><rect x="77.8001%" y="213" width="0.0836%" height="15" fill="rgb(246,177,23)" fg:x="4654" fg:w="5"/><text x="78.0501%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.08%)</title><rect x="77.8001%" y="197" width="0.0836%" height="15" fill="rgb(230,62,27)" fg:x="4654" fg:w="5"/><text x="78.0501%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.08%)</title><rect x="77.8001%" y="181" width="0.0836%" height="15" fill="rgb(216,154,8)" fg:x="4654" fg:w="5"/><text x="78.0501%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="77.8669%" y="165" width="0.0167%" height="15" fill="rgb(244,35,45)" fg:x="4658" fg:w="1"/><text x="78.1169%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.02%)</title><rect x="77.8669%" y="149" width="0.0167%" height="15" fill="rgb(251,115,12)" fg:x="4658" fg:w="1"/><text x="78.1169%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.02%)</title><rect x="77.8669%" y="133" width="0.0167%" height="15" fill="rgb(240,54,50)" fg:x="4658" fg:w="1"/><text x="78.1169%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="77.8837%" y="165" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="4659" fg:w="1"/><text x="78.1337%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="77.8837%" y="149" width="0.0167%" height="15" fill="rgb(207,117,47)" fg:x="4659" fg:w="1"/><text x="78.1337%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="77.8837%" y="133" width="0.0167%" height="15" fill="rgb(249,43,39)" fg:x="4659" fg:w="1"/><text x="78.1337%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.02%)</title><rect x="77.9004%" y="165" width="0.0167%" height="15" fill="rgb(209,38,44)" fg:x="4660" fg:w="1"/><text x="78.1504%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.02%)</title><rect x="77.9004%" y="149" width="0.0167%" height="15" fill="rgb(236,212,23)" fg:x="4660" fg:w="1"/><text x="78.1504%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (4,658 samples, 77.87%)</title><rect x="0.0669%" y="261" width="77.8669%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="4658"/><text x="0.3169%" y="271.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply</text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.05%)</title><rect x="77.8837%" y="245" width="0.0502%" height="15" fill="rgb(211,96,35)" fg:x="4659" fg:w="3"/><text x="78.1337%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.05%)</title><rect x="77.8837%" y="229" width="0.0502%" height="15" fill="rgb(253,215,40)" fg:x="4659" fg:w="3"/><text x="78.1337%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.05%)</title><rect x="77.8837%" y="213" width="0.0502%" height="15" fill="rgb(211,81,21)" fg:x="4659" fg:w="3"/><text x="78.1337%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (3 samples, 0.05%)</title><rect x="77.8837%" y="197" width="0.0502%" height="15" fill="rgb(208,190,38)" fg:x="4659" fg:w="3"/><text x="78.1337%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (3 samples, 0.05%)</title><rect x="77.8837%" y="181" width="0.0502%" height="15" fill="rgb(235,213,38)" fg:x="4659" fg:w="3"/><text x="78.1337%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="77.9171%" y="165" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="4661" fg:w="1"/><text x="78.1671%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.07%)</title><rect x="77.9338%" y="165" width="0.0669%" height="15" fill="rgb(244,218,35)" fg:x="4662" fg:w="4"/><text x="78.1838%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.07%)</title><rect x="77.9338%" y="149" width="0.0669%" height="15" fill="rgb(240,68,47)" fg:x="4662" fg:w="4"/><text x="78.1838%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.07%)</title><rect x="77.9338%" y="133" width="0.0669%" height="15" fill="rgb(210,16,53)" fg:x="4662" fg:w="4"/><text x="78.1838%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (5 samples, 0.08%)</title><rect x="77.9338%" y="197" width="0.0836%" height="15" fill="rgb(235,124,12)" fg:x="4662" fg:w="5"/><text x="78.1838%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (5 samples, 0.08%)</title><rect x="77.9338%" y="181" width="0.0836%" height="15" fill="rgb(224,169,11)" fg:x="4662" fg:w="5"/><text x="78.1838%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="78.0007%" y="165" width="0.0167%" height="15" fill="rgb(250,166,2)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.02%)</title><rect x="78.0007%" y="149" width="0.0167%" height="15" fill="rgb(242,216,29)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::Hasher::write_u64 (1 samples, 0.02%)</title><rect x="78.0007%" y="133" width="0.0167%" height="15" fill="rgb(230,116,27)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="78.0007%" y="117" width="0.0167%" height="15" fill="rgb(228,99,48)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="78.0007%" y="101" width="0.0167%" height="15" fill="rgb(253,11,6)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="78.0007%" y="85" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="4666" fg:w="1"/><text x="78.2507%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (4,665 samples, 77.98%)</title><rect x="0.0502%" y="277" width="77.9840%" height="15" fill="rgb(236,97,10)" fg:x="3" fg:w="4665"/><text x="0.3002%" y="287.50">speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::our_seq (6 samples, 0.10%)</title><rect x="77.9338%" y="261" width="0.1003%" height="15" fill="rgb(233,208,19)" fg:x="4662" fg:w="6"/><text x="78.1838%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.10%)</title><rect x="77.9338%" y="245" width="0.1003%" height="15" fill="rgb(216,164,2)" fg:x="4662" fg:w="6"/><text x="78.1838%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.10%)</title><rect x="77.9338%" y="229" width="0.1003%" height="15" fill="rgb(220,129,5)" fg:x="4662" fg:w="6"/><text x="78.1838%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.10%)</title><rect x="77.9338%" y="213" width="0.1003%" height="15" fill="rgb(242,17,10)" fg:x="4662" fg:w="6"/><text x="78.1838%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.02%)</title><rect x="78.0174%" y="197" width="0.0167%" height="15" fill="rgb(242,107,0)" fg:x="4667" fg:w="1"/><text x="78.2674%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="78.0174%" y="181" width="0.0167%" height="15" fill="rgb(251,28,31)" fg:x="4667" fg:w="1"/><text x="78.2674%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.02%)</title><rect x="78.0174%" y="165" width="0.0167%" height="15" fill="rgb(233,223,10)" fg:x="4667" fg:w="1"/><text x="78.2674%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="78.0174%" y="149" width="0.0167%" height="15" fill="rgb(215,21,27)" fg:x="4667" fg:w="1"/><text x="78.2674%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.02%)</title><rect x="78.0174%" y="133" width="0.0167%" height="15" fill="rgb(232,23,21)" fg:x="4667" fg:w="1"/><text x="78.2674%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_linear::_{{closure}} (4,666 samples, 78.00%)</title><rect x="0.0502%" y="357" width="78.0007%" height="15" fill="rgb(244,5,23)" fg:x="3" fg:w="4666"/><text x="0.3002%" y="367.50">speed-20cf170cf9340871`speed::bench_insert_10_000_linear::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_linear (4,666 samples, 78.00%)</title><rect x="0.0502%" y="341" width="78.0007%" height="15" fill="rgb(226,81,46)" fg:x="3" fg:w="4666"/><text x="0.3002%" y="351.50">speed-20cf170cf9340871`speed::bench_insert_10_000_linear</text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (4,666 samples, 78.00%)</title><rect x="0.0502%" y="325" width="78.0007%" height="15" fill="rgb(247,70,30)" fg:x="3" fg:w="4666"/><text x="0.3002%" y="335.50">speed-20cf170cf9340871`test::bench::Bencher::iter</text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (4,666 samples, 78.00%)</title><rect x="0.0502%" y="309" width="78.0007%" height="15" fill="rgb(212,68,19)" fg:x="3" fg:w="4666"/><text x="0.3002%" y="319.50">speed-20cf170cf9340871`test::bench::ns_iter_inner</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_linear::_{{closure}} (4,666 samples, 78.00%)</title><rect x="0.0502%" y="293" width="78.0007%" height="15" fill="rgb(240,187,13)" fg:x="3" fg:w="4666"/><text x="0.3002%" y="303.50">speed-20cf170cf9340871`speed::bench_insert_10_000_linear::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="78.0341%" y="277" width="0.0167%" height="15" fill="rgb(223,113,26)" fg:x="4668" fg:w="1"/><text x="78.2841%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`core::clone::impls::_&lt;impl core::clone::Clone for i32&gt;::clone (1 samples, 0.02%)</title><rect x="78.0341%" y="261" width="0.0167%" height="15" fill="rgb(206,192,2)" fg:x="4668" fg:w="1"/><text x="78.2841%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="78.0843%" y="229" width="0.0167%" height="15" fill="rgb(241,108,4)" fg:x="4671" fg:w="1"/><text x="78.3343%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="78.0843%" y="213" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="4671" fg:w="1"/><text x="78.3343%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::insert (88 samples, 1.47%)</title><rect x="78.1010%" y="229" width="1.4711%" height="15" fill="rgb(224,114,35)" fg:x="4672" fg:w="88"/><text x="78.3510%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (88 samples, 1.47%)</title><rect x="78.1010%" y="213" width="1.4711%" height="15" fill="rgb(245,159,27)" fg:x="4672" fg:w="88"/><text x="78.3510%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (2 samples, 0.03%)</title><rect x="79.5720%" y="229" width="0.0334%" height="15" fill="rgb(245,172,44)" fg:x="4760" fg:w="2"/><text x="79.8220%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="79.5888%" y="213" width="0.0167%" height="15" fill="rgb(236,23,11)" fg:x="4761" fg:w="1"/><text x="79.8388%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="79.5888%" y="197" width="0.0167%" height="15" fill="rgb(205,117,38)" fg:x="4761" fg:w="1"/><text x="79.8388%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect x="79.5888%" y="181" width="0.0167%" height="15" fill="rgb(237,72,25)" fg:x="4761" fg:w="1"/><text x="79.8388%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (93 samples, 1.55%)</title><rect x="78.0675%" y="245" width="1.5547%" height="15" fill="rgb(244,70,9)" fg:x="4670" fg:w="93"/><text x="78.3175%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect x="79.6055%" y="229" width="0.0167%" height="15" fill="rgb(217,125,39)" fg:x="4762" fg:w="1"/><text x="79.8555%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.02%)</title><rect x="79.6055%" y="213" width="0.0167%" height="15" fill="rgb(235,36,10)" fg:x="4762" fg:w="1"/><text x="79.8555%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_insert_hash (1 samples, 0.02%)</title><rect x="79.6556%" y="213" width="0.0167%" height="15" fill="rgb(251,123,47)" fg:x="4765" fg:w="1"/><text x="79.9056%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="79.6556%" y="197" width="0.0167%" height="15" fill="rgb(221,13,13)" fg:x="4765" fg:w="1"/><text x="79.9056%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="79.6556%" y="181" width="0.0167%" height="15" fill="rgb(238,131,9)" fg:x="4765" fg:w="1"/><text x="79.9056%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="79.6556%" y="165" width="0.0167%" height="15" fill="rgb(211,50,8)" fg:x="4765" fg:w="1"/><text x="79.9056%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="79.6556%" y="149" width="0.0167%" height="15" fill="rgb(245,182,24)" fg:x="4765" fg:w="1"/><text x="79.9056%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="79.6724%" y="181" width="0.0167%" height="15" fill="rgb(242,14,37)" fg:x="4766" fg:w="1"/><text x="79.9224%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="79.6891%" y="165" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="4767" fg:w="1"/><text x="79.9391%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="79.7058%" y="165" width="0.0167%" height="15" fill="rgb(213,55,15)" fg:x="4768" fg:w="1"/><text x="79.9558%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="79.7058%" y="149" width="0.0167%" height="15" fill="rgb(209,9,3)" fg:x="4768" fg:w="1"/><text x="79.9558%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.12%)</title><rect x="79.6222%" y="245" width="0.1170%" height="15" fill="rgb(230,59,30)" fg:x="4763" fg:w="7"/><text x="79.8722%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.12%)</title><rect x="79.6222%" y="229" width="0.1170%" height="15" fill="rgb(209,121,21)" fg:x="4763" fg:w="7"/><text x="79.8722%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.07%)</title><rect x="79.6724%" y="213" width="0.0669%" height="15" fill="rgb(220,109,13)" fg:x="4766" fg:w="4"/><text x="79.9224%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.07%)</title><rect x="79.6724%" y="197" width="0.0669%" height="15" fill="rgb(232,18,1)" fg:x="4766" fg:w="4"/><text x="79.9224%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.05%)</title><rect x="79.6891%" y="181" width="0.0502%" height="15" fill="rgb(215,41,42)" fg:x="4767" fg:w="3"/><text x="79.9391%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="79.7225%" y="165" width="0.0167%" height="15" fill="rgb(224,123,36)" fg:x="4769" fg:w="1"/><text x="79.9725%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.02%)</title><rect x="79.7225%" y="149" width="0.0167%" height="15" fill="rgb(240,125,3)" fg:x="4769" fg:w="1"/><text x="79.9725%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (5 samples, 0.08%)</title><rect x="79.7392%" y="197" width="0.0836%" height="15" fill="rgb(205,98,50)" fg:x="4770" fg:w="5"/><text x="79.9892%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (5 samples, 0.08%)</title><rect x="79.7392%" y="181" width="0.0836%" height="15" fill="rgb(205,185,37)" fg:x="4770" fg:w="5"/><text x="79.9892%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.08%)</title><rect x="79.7392%" y="165" width="0.0836%" height="15" fill="rgb(238,207,15)" fg:x="4770" fg:w="5"/><text x="79.9892%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.08%)</title><rect x="79.7392%" y="149" width="0.0836%" height="15" fill="rgb(213,199,42)" fg:x="4770" fg:w="5"/><text x="79.9892%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.08%)</title><rect x="79.7392%" y="133" width="0.0836%" height="15" fill="rgb(235,201,11)" fg:x="4770" fg:w="5"/><text x="79.9892%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.02%)</title><rect x="79.8228%" y="133" width="0.0167%" height="15" fill="rgb(207,46,11)" fg:x="4775" fg:w="1"/><text x="80.0728%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (108 samples, 1.81%)</title><rect x="78.0675%" y="261" width="1.8054%" height="15" fill="rgb(241,35,35)" fg:x="4670" fg:w="108"/><text x="78.3175%" y="271.50">s..</text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (8 samples, 0.13%)</title><rect x="79.7392%" y="245" width="0.1337%" height="15" fill="rgb(243,32,47)" fg:x="4770" fg:w="8"/><text x="79.9892%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (8 samples, 0.13%)</title><rect x="79.7392%" y="229" width="0.1337%" height="15" fill="rgb(247,202,23)" fg:x="4770" fg:w="8"/><text x="79.9892%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (8 samples, 0.13%)</title><rect x="79.7392%" y="213" width="0.1337%" height="15" fill="rgb(219,102,11)" fg:x="4770" fg:w="8"/><text x="79.9892%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.05%)</title><rect x="79.8228%" y="197" width="0.0502%" height="15" fill="rgb(243,110,44)" fg:x="4775" fg:w="3"/><text x="80.0728%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.05%)</title><rect x="79.8228%" y="181" width="0.0502%" height="15" fill="rgb(222,74,54)" fg:x="4775" fg:w="3"/><text x="80.0728%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.05%)</title><rect x="79.8228%" y="165" width="0.0502%" height="15" fill="rgb(216,99,12)" fg:x="4775" fg:w="3"/><text x="80.0728%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::sse2::Group::match_byte (3 samples, 0.05%)</title><rect x="79.8228%" y="149" width="0.0502%" height="15" fill="rgb(226,22,26)" fg:x="4775" fg:w="3"/><text x="80.0728%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.03%)</title><rect x="79.8395%" y="133" width="0.0334%" height="15" fill="rgb(217,163,10)" fg:x="4776" fg:w="2"/><text x="80.0895%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.02%)</title><rect x="79.8562%" y="117" width="0.0167%" height="15" fill="rgb(213,25,53)" fg:x="4777" fg:w="1"/><text x="80.1062%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="79.8730%" y="197" width="0.0167%" height="15" fill="rgb(252,105,26)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="79.8730%" y="181" width="0.0167%" height="15" fill="rgb(220,39,43)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="79.8730%" y="165" width="0.0167%" height="15" fill="rgb(229,68,48)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.02%)</title><rect x="79.8730%" y="149" width="0.0167%" height="15" fill="rgb(252,8,32)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::Hasher::write_u64 (1 samples, 0.02%)</title><rect x="79.8730%" y="133" width="0.0167%" height="15" fill="rgb(223,20,43)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="79.8730%" y="117" width="0.0167%" height="15" fill="rgb(229,81,49)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="79.8730%" y="101" width="0.0167%" height="15" fill="rgb(236,28,36)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::sip::u8to64_le (1 samples, 0.02%)</title><rect x="79.8730%" y="85" width="0.0167%" height="15" fill="rgb(249,185,26)" fg:x="4778" fg:w="1"/><text x="80.1230%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_root::_{{closure}} (111 samples, 1.86%)</title><rect x="78.0508%" y="357" width="1.8556%" height="15" fill="rgb(249,174,33)" fg:x="4669" fg:w="111"/><text x="78.3008%" y="367.50">s..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_root (111 samples, 1.86%)</title><rect x="78.0508%" y="341" width="1.8556%" height="15" fill="rgb(233,201,37)" fg:x="4669" fg:w="111"/><text x="78.3008%" y="351.50">s..</text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (111 samples, 1.86%)</title><rect x="78.0508%" y="325" width="1.8556%" height="15" fill="rgb(221,78,26)" fg:x="4669" fg:w="111"/><text x="78.3008%" y="335.50">s..</text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (111 samples, 1.86%)</title><rect x="78.0508%" y="309" width="1.8556%" height="15" fill="rgb(250,127,30)" fg:x="4669" fg:w="111"/><text x="78.3008%" y="319.50">s..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_10_000_root::_{{closure}} (111 samples, 1.86%)</title><rect x="78.0508%" y="293" width="1.8556%" height="15" fill="rgb(230,49,44)" fg:x="4669" fg:w="111"/><text x="78.3008%" y="303.50">s..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (110 samples, 1.84%)</title><rect x="78.0675%" y="277" width="1.8388%" height="15" fill="rgb(229,67,23)" fg:x="4670" fg:w="110"/><text x="78.3175%" y="287.50">s..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::our_seq (2 samples, 0.03%)</title><rect x="79.8730%" y="261" width="0.0334%" height="15" fill="rgb(249,83,47)" fg:x="4778" fg:w="2"/><text x="80.1230%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.03%)</title><rect x="79.8730%" y="245" width="0.0334%" height="15" fill="rgb(215,43,3)" fg:x="4778" fg:w="2"/><text x="80.1230%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.03%)</title><rect x="79.8730%" y="229" width="0.0334%" height="15" fill="rgb(238,154,13)" fg:x="4778" fg:w="2"/><text x="80.1230%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.03%)</title><rect x="79.8730%" y="213" width="0.0334%" height="15" fill="rgb(219,56,2)" fg:x="4778" fg:w="2"/><text x="80.1230%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.02%)</title><rect x="79.8897%" y="197" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="4779" fg:w="1"/><text x="80.1397%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="79.8897%" y="181" width="0.0167%" height="15" fill="rgb(235,30,7)" fg:x="4779" fg:w="1"/><text x="80.1397%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="79.9064%" y="277" width="0.0167%" height="15" fill="rgb(250,79,13)" fg:x="4780" fg:w="1"/><text x="80.1564%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="79.9064%" y="261" width="0.0167%" height="15" fill="rgb(211,146,34)" fg:x="4780" fg:w="1"/><text x="80.1564%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::debug::_&lt;impl bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;&gt;::log_ops (1 samples, 0.02%)</title><rect x="79.9231%" y="277" width="0.0167%" height="15" fill="rgb(228,22,38)" fg:x="4781" fg:w="1"/><text x="80.1731%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.07%)</title><rect x="79.9565%" y="261" width="0.0669%" height="15" fill="rgb(235,168,5)" fg:x="4783" fg:w="4"/><text x="80.2065%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.05%)</title><rect x="80.0234%" y="261" width="0.0502%" height="15" fill="rgb(221,155,16)" fg:x="4787" fg:w="3"/><text x="80.2734%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="80.1070%" y="245" width="0.0334%" height="15" fill="rgb(215,215,53)" fg:x="4792" fg:w="2"/><text x="80.3570%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.03%)</title><rect x="80.1070%" y="229" width="0.0334%" height="15" fill="rgb(223,4,10)" fg:x="4792" fg:w="2"/><text x="80.3570%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.02%)</title><rect x="80.1404%" y="213" width="0.0167%" height="15" fill="rgb(234,103,6)" fg:x="4794" fg:w="1"/><text x="80.3904%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="80.1404%" y="229" width="0.0334%" height="15" fill="rgb(227,97,0)" fg:x="4794" fg:w="2"/><text x="80.3904%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="80.1571%" y="213" width="0.0167%" height="15" fill="rgb(234,150,53)" fg:x="4795" fg:w="1"/><text x="80.4071%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.05%)</title><rect x="80.1404%" y="245" width="0.0502%" height="15" fill="rgb(228,201,54)" fg:x="4794" fg:w="3"/><text x="80.3904%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="80.1739%" y="229" width="0.0167%" height="15" fill="rgb(222,22,37)" fg:x="4796" fg:w="1"/><text x="80.4239%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect x="80.1739%" y="213" width="0.0167%" height="15" fill="rgb(237,53,32)" fg:x="4796" fg:w="1"/><text x="80.4239%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (8 samples, 0.13%)</title><rect x="80.0736%" y="261" width="0.1337%" height="15" fill="rgb(233,25,53)" fg:x="4790" fg:w="8"/><text x="80.3236%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="80.1906%" y="245" width="0.0167%" height="15" fill="rgb(210,40,34)" fg:x="4797" fg:w="1"/><text x="80.4406%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="80.1906%" y="229" width="0.0167%" height="15" fill="rgb(241,220,44)" fg:x="4797" fg:w="1"/><text x="80.4406%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.02%)</title><rect x="80.1906%" y="213" width="0.0167%" height="15" fill="rgb(235,28,35)" fg:x="4797" fg:w="1"/><text x="80.4406%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="82.2802%" y="245" width="0.0167%" height="15" fill="rgb(210,56,17)" fg:x="4922" fg:w="1"/><text x="82.5302%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.17%)</title><rect x="82.2969%" y="245" width="0.1672%" height="15" fill="rgb(224,130,29)" fg:x="4923" fg:w="10"/><text x="82.5469%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (120 samples, 2.01%)</title><rect x="82.7817%" y="229" width="2.0060%" height="15" fill="rgb(235,212,8)" fg:x="4952" fg:w="120"/><text x="83.0317%" y="239.50">s..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (99 samples, 1.65%)</title><rect x="83.1327%" y="213" width="1.6550%" height="15" fill="rgb(223,33,50)" fg:x="4973" fg:w="99"/><text x="83.3827%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (35 samples, 0.59%)</title><rect x="84.2026%" y="197" width="0.5851%" height="15" fill="rgb(219,149,13)" fg:x="5037" fg:w="35"/><text x="84.4526%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.08%)</title><rect x="84.7877%" y="229" width="0.0836%" height="15" fill="rgb(250,156,29)" fg:x="5072" fg:w="5"/><text x="85.0377%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (150 samples, 2.51%)</title><rect x="82.4641%" y="245" width="2.5075%" height="15" fill="rgb(216,193,19)" fg:x="4933" fg:w="150"/><text x="82.7141%" y="255.50">sp..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (6 samples, 0.10%)</title><rect x="84.8713%" y="229" width="0.1003%" height="15" fill="rgb(216,135,14)" fg:x="5077" fg:w="6"/><text x="85.1213%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4 samples, 0.07%)</title><rect x="84.9716%" y="245" width="0.0669%" height="15" fill="rgb(241,47,5)" fg:x="5083" fg:w="4"/><text x="85.2216%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="85.0384%" y="245" width="0.0167%" height="15" fill="rgb(233,42,35)" fg:x="5087" fg:w="1"/><text x="85.2884%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.20%)</title><rect x="85.0552%" y="229" width="0.2006%" height="15" fill="rgb(231,13,6)" fg:x="5088" fg:w="12"/><text x="85.3052%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::insert (15 samples, 0.25%)</title><rect x="85.0552%" y="245" width="0.2508%" height="15" fill="rgb(207,181,40)" fg:x="5088" fg:w="15"/><text x="85.3052%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.05%)</title><rect x="85.2558%" y="229" width="0.0502%" height="15" fill="rgb(254,173,49)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.05%)</title><rect x="85.2558%" y="213" width="0.0502%" height="15" fill="rgb(221,1,38)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.05%)</title><rect x="85.2558%" y="197" width="0.0502%" height="15" fill="rgb(206,124,46)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.05%)</title><rect x="85.2558%" y="181" width="0.0502%" height="15" fill="rgb(249,21,11)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::finish_grow (3 samples, 0.05%)</title><rect x="85.2558%" y="165" width="0.0502%" height="15" fill="rgb(222,201,40)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.05%)</title><rect x="85.2558%" y="149" width="0.0502%" height="15" fill="rgb(235,61,29)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`alloc::alloc::Global::grow_impl (3 samples, 0.05%)</title><rect x="85.2558%" y="133" width="0.0502%" height="15" fill="rgb(219,207,3)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.05%)</title><rect x="85.2558%" y="117" width="0.0502%" height="15" fill="rgb(222,56,46)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.05%)</title><rect x="85.2558%" y="101" width="0.0502%" height="15" fill="rgb(239,76,54)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.05%)</title><rect x="85.2558%" y="85" width="0.0502%" height="15" fill="rgb(231,124,27)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="85.2558%" y="69" width="0.0502%" height="15" fill="rgb(249,195,6)" fg:x="5100" fg:w="3"/><text x="85.5058%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="85.3059%" y="245" width="0.0167%" height="15" fill="rgb(237,174,47)" fg:x="5103" fg:w="1"/><text x="85.5559%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.03%)</title><rect x="85.8576%" y="213" width="0.0334%" height="15" fill="rgb(206,201,31)" fg:x="5136" fg:w="2"/><text x="86.1076%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (104 samples, 1.74%)</title><rect x="85.4397%" y="229" width="1.7385%" height="15" fill="rgb(231,57,52)" fg:x="5111" fg:w="104"/><text x="85.6897%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (77 samples, 1.29%)</title><rect x="85.8910%" y="213" width="1.2872%" height="15" fill="rgb(248,177,22)" fg:x="5138" fg:w="77"/><text x="86.1410%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (31 samples, 0.52%)</title><rect x="86.6600%" y="197" width="0.5182%" height="15" fill="rgb(215,211,37)" fg:x="5184" fg:w="31"/><text x="86.9100%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="87.1782%" y="229" width="0.0502%" height="15" fill="rgb(241,128,51)" fg:x="5215" fg:w="3"/><text x="87.4282%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (57 samples, 0.95%)</title><rect x="89.1341%" y="197" width="0.9529%" height="15" fill="rgb(227,165,31)" fg:x="5332" fg:w="57"/><text x="89.3841%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="90.0869%" y="197" width="0.0167%" height="15" fill="rgb(228,167,24)" fg:x="5389" fg:w="1"/><text x="90.3369%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (223 samples, 3.73%)</title><rect x="88.5657%" y="213" width="3.7279%" height="15" fill="rgb(228,143,12)" fg:x="5298" fg:w="223"/><text x="88.8157%" y="223.50">spee..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (131 samples, 2.19%)</title><rect x="90.1036%" y="197" width="2.1899%" height="15" fill="rgb(249,149,8)" fg:x="5390" fg:w="131"/><text x="90.3536%" y="207.50">s..</text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (67 samples, 1.12%)</title><rect x="91.1735%" y="181" width="1.1200%" height="15" fill="rgb(243,35,44)" fg:x="5454" fg:w="67"/><text x="91.4235%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (3 samples, 0.05%)</title><rect x="92.6948%" y="197" width="0.0502%" height="15" fill="rgb(246,89,9)" fg:x="5545" fg:w="3"/><text x="92.9448%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (115 samples, 1.92%)</title><rect x="92.2935%" y="213" width="1.9224%" height="15" fill="rgb(233,213,13)" fg:x="5521" fg:w="115"/><text x="92.5435%" y="223.50">s..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (88 samples, 1.47%)</title><rect x="92.7449%" y="197" width="1.4711%" height="15" fill="rgb(233,141,41)" fg:x="5548" fg:w="88"/><text x="92.9949%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (32 samples, 0.53%)</title><rect x="93.6810%" y="181" width="0.5349%" height="15" fill="rgb(239,167,4)" fg:x="5604" fg:w="32"/><text x="93.9310%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (3 samples, 0.05%)</title><rect x="94.2160%" y="213" width="0.0502%" height="15" fill="rgb(209,217,16)" fg:x="5636" fg:w="3"/><text x="94.4660%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (424 samples, 7.09%)</title><rect x="87.2284%" y="229" width="7.0879%" height="15" fill="rgb(219,88,35)" fg:x="5218" fg:w="424"/><text x="87.4784%" y="239.50">speed-20cf..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3 samples, 0.05%)</title><rect x="94.2661%" y="213" width="0.0502%" height="15" fill="rgb(220,193,23)" fg:x="5639" fg:w="3"/><text x="94.5161%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="94.3163%" y="229" width="0.0167%" height="15" fill="rgb(230,90,52)" fg:x="5642" fg:w="1"/><text x="94.5663%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.03%)</title><rect x="94.3330%" y="229" width="0.0334%" height="15" fill="rgb(252,106,19)" fg:x="5643" fg:w="2"/><text x="94.5830%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (2 samples, 0.03%)</title><rect x="94.4333%" y="213" width="0.0334%" height="15" fill="rgb(206,74,20)" fg:x="5649" fg:w="2"/><text x="94.6833%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (137 samples, 2.29%)</title><rect x="94.3664%" y="229" width="2.2902%" height="15" fill="rgb(230,138,44)" fg:x="5645" fg:w="137"/><text x="94.6164%" y="239.50">s..</text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (131 samples, 2.19%)</title><rect x="94.4667%" y="213" width="2.1899%" height="15" fill="rgb(235,182,43)" fg:x="5651" fg:w="131"/><text x="94.7167%" y="223.50">s..</text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (109 samples, 1.82%)</title><rect x="94.8345%" y="197" width="1.8221%" height="15" fill="rgb(242,16,51)" fg:x="5673" fg:w="109"/><text x="95.0845%" y="207.50">s..</text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::find (681 samples, 11.38%)</title><rect x="85.3226%" y="245" width="11.3842%" height="15" fill="rgb(248,9,4)" fg:x="5104" fg:w="681"/><text x="85.5726%" y="255.50">speed-20cf170cf93..</text></g><g><title>speed-20cf170cf9340871`core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.05%)</title><rect x="96.6566%" y="229" width="0.0502%" height="15" fill="rgb(210,31,22)" fg:x="5782" fg:w="3"/><text x="96.9066%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::author (4 samples, 0.07%)</title><rect x="96.7068%" y="245" width="0.0669%" height="15" fill="rgb(239,54,39)" fg:x="5785" fg:w="4"/><text x="96.9568%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (6 samples, 0.10%)</title><rect x="96.7737%" y="245" width="0.1003%" height="15" fill="rgb(230,99,41)" fg:x="5789" fg:w="6"/><text x="97.0237%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (10 samples, 0.17%)</title><rect x="96.8740%" y="245" width="0.1672%" height="15" fill="rgb(253,106,12)" fg:x="5795" fg:w="10"/><text x="97.1240%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (14 samples, 0.23%)</title><rect x="97.0411%" y="245" width="0.2340%" height="15" fill="rgb(213,46,41)" fg:x="5805" fg:w="14"/><text x="97.2911%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::unwrap (12 samples, 0.20%)</title><rect x="97.2752%" y="245" width="0.2006%" height="15" fill="rgb(215,133,35)" fg:x="5819" fg:w="12"/><text x="97.5252%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::slice::_&lt;impl [T]&gt;::iter (7 samples, 0.12%)</title><rect x="97.4758%" y="245" width="0.1170%" height="15" fill="rgb(213,28,5)" fg:x="5831" fg:w="7"/><text x="97.7258%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::integrate (1,073 samples, 17.94%)</title><rect x="80.2073%" y="261" width="17.9371%" height="15" fill="rgb(215,77,49)" fg:x="4798" fg:w="1073"/><text x="80.4573%" y="271.50">speed-20cf170cf9340871`bft_j..</text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (33 samples, 0.55%)</title><rect x="97.5928%" y="245" width="0.5517%" height="15" fill="rgb(248,100,22)" fg:x="5838" fg:w="33"/><text x="97.8428%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (8 samples, 0.13%)</title><rect x="98.0107%" y="229" width="0.1337%" height="15" fill="rgb(208,67,9)" fg:x="5863" fg:w="8"/><text x="98.2607%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::op::Op&lt;T&gt;::sequence_num (11 samples, 0.18%)</title><rect x="98.1444%" y="261" width="0.1839%" height="15" fill="rgb(219,133,21)" fg:x="5871" fg:w="11"/><text x="98.3944%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (4 samples, 0.07%)</title><rect x="98.3283%" y="261" width="0.0669%" height="15" fill="rgb(246,46,29)" fg:x="5882" fg:w="4"/><text x="98.5783%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.07%)</title><rect x="98.3952%" y="261" width="0.0669%" height="15" fill="rgb(246,185,52)" fg:x="5886" fg:w="4"/><text x="98.6452%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::max (1 samples, 0.02%)</title><rect x="98.4621%" y="261" width="0.0167%" height="15" fill="rgb(252,136,11)" fg:x="5890" fg:w="1"/><text x="98.7121%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="98.4621%" y="245" width="0.0167%" height="15" fill="rgb(219,138,53)" fg:x="5890" fg:w="1"/><text x="98.7121%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.02%)</title><rect x="98.4621%" y="229" width="0.0167%" height="15" fill="rgb(211,51,23)" fg:x="5890" fg:w="1"/><text x="98.7121%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::unwrap (6 samples, 0.10%)</title><rect x="98.4788%" y="261" width="0.1003%" height="15" fill="rgb(247,221,28)" fg:x="5891" fg:w="6"/><text x="98.7288%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::tuple::_&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (6 samples, 0.10%)</title><rect x="98.5791%" y="261" width="0.1003%" height="15" fill="rgb(251,222,45)" fg:x="5897" fg:w="6"/><text x="98.8291%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.12%)</title><rect x="98.7295%" y="165" width="0.1170%" height="15" fill="rgb(217,162,53)" fg:x="5906" fg:w="7"/><text x="98.9795%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.23%)</title><rect x="98.6961%" y="197" width="0.2340%" height="15" fill="rgb(229,93,14)" fg:x="5904" fg:w="14"/><text x="98.9461%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.22%)</title><rect x="98.7128%" y="181" width="0.2173%" height="15" fill="rgb(209,67,49)" fg:x="5905" fg:w="13"/><text x="98.9628%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.08%)</title><rect x="98.8465%" y="165" width="0.0836%" height="15" fill="rgb(213,87,29)" fg:x="5913" fg:w="5"/><text x="99.0965%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_insert_hash (16 samples, 0.27%)</title><rect x="98.6794%" y="229" width="0.2675%" height="15" fill="rgb(205,151,52)" fg:x="5903" fg:w="16"/><text x="98.9294%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (16 samples, 0.27%)</title><rect x="98.6794%" y="213" width="0.2675%" height="15" fill="rgb(253,215,39)" fg:x="5903" fg:w="16"/><text x="98.9294%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="98.9301%" y="197" width="0.0167%" height="15" fill="rgb(221,220,41)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.02%)</title><rect x="98.9301%" y="181" width="0.0167%" height="15" fill="rgb(218,133,21)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::Hasher::write_u64 (1 samples, 0.02%)</title><rect x="98.9301%" y="165" width="0.0167%" height="15" fill="rgb(221,193,43)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="98.9301%" y="149" width="0.0167%" height="15" fill="rgb(240,128,52)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="98.9301%" y="133" width="0.0167%" height="15" fill="rgb(253,114,12)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="98.9301%" y="117" width="0.0167%" height="15" fill="rgb(215,223,47)" fg:x="5918" fg:w="1"/><text x="99.1801%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.9468%" y="197" width="0.0167%" height="15" fill="rgb(248,225,23)" fg:x="5919" fg:w="1"/><text x="99.1968%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="98.9970%" y="181" width="0.0167%" height="15" fill="rgb(250,108,0)" fg:x="5922" fg:w="1"/><text x="99.2470%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.02%)</title><rect x="99.0137%" y="181" width="0.0167%" height="15" fill="rgb(228,208,7)" fg:x="5923" fg:w="1"/><text x="99.2637%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="99.0304%" y="181" width="0.0167%" height="15" fill="rgb(244,45,10)" fg:x="5924" fg:w="1"/><text x="99.2804%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.02%)</title><rect x="99.0471%" y="165" width="0.0167%" height="15" fill="rgb(207,125,25)" fg:x="5925" fg:w="1"/><text x="99.2971%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.02%)</title><rect x="99.0471%" y="149" width="0.0167%" height="15" fill="rgb(210,195,18)" fg:x="5925" fg:w="1"/><text x="99.2971%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4 samples, 0.07%)</title><rect x="99.0471%" y="181" width="0.0669%" height="15" fill="rgb(249,80,12)" fg:x="5925" fg:w="4"/><text x="99.2971%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.05%)</title><rect x="99.0639%" y="165" width="0.0502%" height="15" fill="rgb(221,65,9)" fg:x="5926" fg:w="3"/><text x="99.3139%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="99.1140%" y="165" width="0.0167%" height="15" fill="rgb(235,49,36)" fg:x="5929" fg:w="1"/><text x="99.3640%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16 samples, 0.27%)</title><rect x="98.9468%" y="229" width="0.2675%" height="15" fill="rgb(225,32,20)" fg:x="5919" fg:w="16"/><text x="99.1968%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.27%)</title><rect x="98.9468%" y="213" width="0.2675%" height="15" fill="rgb(215,141,46)" fg:x="5919" fg:w="16"/><text x="99.1968%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (15 samples, 0.25%)</title><rect x="98.9636%" y="197" width="0.2508%" height="15" fill="rgb(250,160,47)" fg:x="5920" fg:w="15"/><text x="99.2136%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::sse2::Group::match_byte (6 samples, 0.10%)</title><rect x="99.1140%" y="181" width="0.1003%" height="15" fill="rgb(216,222,40)" fg:x="5929" fg:w="6"/><text x="99.3640%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set1_epi8 (5 samples, 0.08%)</title><rect x="99.1307%" y="165" width="0.0836%" height="15" fill="rgb(234,217,39)" fg:x="5930" fg:w="5"/><text x="99.3807%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.05%)</title><rect x="99.1642%" y="149" width="0.0502%" height="15" fill="rgb(207,178,40)" fg:x="5932" fg:w="3"/><text x="99.4142%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="99.2143%" y="181" width="0.0167%" height="15" fill="rgb(221,136,13)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.2143%" y="165" width="0.0167%" height="15" fill="rgb(249,199,10)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (1 samples, 0.02%)</title><rect x="99.2143%" y="149" width="0.0167%" height="15" fill="rgb(249,222,13)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.02%)</title><rect x="99.2143%" y="133" width="0.0167%" height="15" fill="rgb(244,185,38)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.02%)</title><rect x="99.2143%" y="117" width="0.0167%" height="15" fill="rgb(236,202,9)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`core::num::_&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="99.2143%" y="101" width="0.0167%" height="15" fill="rgb(250,229,37)" fg:x="5935" fg:w="1"/><text x="99.4643%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.02%)</title><rect x="99.2310%" y="165" width="0.0167%" height="15" fill="rgb(206,174,23)" fg:x="5936" fg:w="1"/><text x="99.4810%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="99.2310%" y="149" width="0.0167%" height="15" fill="rgb(211,33,43)" fg:x="5936" fg:w="1"/><text x="99.4810%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="99.2310%" y="133" width="0.0167%" height="15" fill="rgb(245,58,50)" fg:x="5936" fg:w="1"/><text x="99.4810%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.2310%" y="117" width="0.0167%" height="15" fill="rgb(244,68,36)" fg:x="5936" fg:w="1"/><text x="99.4810%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.2310%" y="101" width="0.0167%" height="15" fill="rgb(232,229,15)" fg:x="5936" fg:w="1"/><text x="99.4810%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2 samples, 0.03%)</title><rect x="99.2310%" y="181" width="0.0334%" height="15" fill="rgb(254,30,23)" fg:x="5936" fg:w="2"/><text x="99.4810%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="99.2477%" y="165" width="0.0167%" height="15" fill="rgb(235,160,14)" fg:x="5937" fg:w="1"/><text x="99.4977%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.02%)</title><rect x="99.2645%" y="181" width="0.0167%" height="15" fill="rgb(212,155,44)" fg:x="5938" fg:w="1"/><text x="99.5145%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.02%)</title><rect x="99.2645%" y="165" width="0.0167%" height="15" fill="rgb(226,2,50)" fg:x="5938" fg:w="1"/><text x="99.5145%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.08%)</title><rect x="99.2143%" y="213" width="0.0836%" height="15" fill="rgb(234,177,6)" fg:x="5935" fg:w="5"/><text x="99.4643%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.08%)</title><rect x="99.2143%" y="197" width="0.0836%" height="15" fill="rgb(217,24,9)" fg:x="5935" fg:w="5"/><text x="99.4643%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.02%)</title><rect x="99.2812%" y="181" width="0.0167%" height="15" fill="rgb(220,13,46)" fg:x="5939" fg:w="1"/><text x="99.5312%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="99.2812%" y="165" width="0.0167%" height="15" fill="rgb(239,221,27)" fg:x="5939" fg:w="1"/><text x="99.5312%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (38 samples, 0.64%)</title><rect x="98.6794%" y="261" width="0.6352%" height="15" fill="rgb(222,198,25)" fg:x="5903" fg:w="38"/><text x="98.9294%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.64%)</title><rect x="98.6794%" y="245" width="0.6352%" height="15" fill="rgb(211,99,13)" fg:x="5903" fg:w="38"/><text x="98.9294%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.10%)</title><rect x="99.2143%" y="229" width="0.1003%" height="15" fill="rgb(232,111,31)" fg:x="5935" fg:w="6"/><text x="99.4643%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="99.2979%" y="213" width="0.0167%" height="15" fill="rgb(245,82,37)" fg:x="5940" fg:w="1"/><text x="99.5479%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="99.3146%" y="181" width="0.0167%" height="15" fill="rgb(227,149,46)" fg:x="5941" fg:w="1"/><text x="99.5646%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="99.3313%" y="149" width="0.0167%" height="15" fill="rgb(218,36,50)" fg:x="5942" fg:w="1"/><text x="99.5813%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.07%)</title><rect x="99.3313%" y="181" width="0.0669%" height="15" fill="rgb(226,80,48)" fg:x="5942" fg:w="4"/><text x="99.5813%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.07%)</title><rect x="99.3313%" y="165" width="0.0669%" height="15" fill="rgb(238,224,15)" fg:x="5942" fg:w="4"/><text x="99.5813%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.05%)</title><rect x="99.3480%" y="149" width="0.0502%" height="15" fill="rgb(241,136,10)" fg:x="5943" fg:w="3"/><text x="99.5980%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.07%)</title><rect x="99.3982%" y="181" width="0.0669%" height="15" fill="rgb(208,32,45)" fg:x="5946" fg:w="4"/><text x="99.6482%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.05%)</title><rect x="99.4149%" y="165" width="0.0502%" height="15" fill="rgb(207,135,9)" fg:x="5947" fg:w="3"/><text x="99.6649%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (17 samples, 0.28%)</title><rect x="99.3146%" y="213" width="0.2842%" height="15" fill="rgb(206,86,44)" fg:x="5941" fg:w="17"/><text x="99.5646%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (17 samples, 0.28%)</title><rect x="99.3146%" y="197" width="0.2842%" height="15" fill="rgb(245,177,15)" fg:x="5941" fg:w="17"/><text x="99.5646%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.13%)</title><rect x="99.4651%" y="181" width="0.1337%" height="15" fill="rgb(206,64,50)" fg:x="5950" fg:w="8"/><text x="99.7151%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for (T,B)&gt;::hash (8 samples, 0.13%)</title><rect x="99.4651%" y="165" width="0.1337%" height="15" fill="rgb(234,36,40)" fg:x="5950" fg:w="8"/><text x="99.7151%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (8 samples, 0.13%)</title><rect x="99.4651%" y="149" width="0.1337%" height="15" fill="rgb(213,64,8)" fg:x="5950" fg:w="8"/><text x="99.7151%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::Hasher::write_u64 (7 samples, 0.12%)</title><rect x="99.4818%" y="133" width="0.1170%" height="15" fill="rgb(210,75,36)" fg:x="5951" fg:w="7"/><text x="99.7318%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.12%)</title><rect x="99.4818%" y="117" width="0.1170%" height="15" fill="rgb(229,88,21)" fg:x="5951" fg:w="7"/><text x="99.7318%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.12%)</title><rect x="99.4818%" y="101" width="0.1170%" height="15" fill="rgb(252,204,47)" fg:x="5951" fg:w="7"/><text x="99.7318%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.05%)</title><rect x="99.5486%" y="85" width="0.0502%" height="15" fill="rgb(208,77,27)" fg:x="5955" fg:w="3"/><text x="99.7986%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.6489%" y="165" width="0.0167%" height="15" fill="rgb(221,76,26)" fg:x="5961" fg:w="1"/><text x="99.8989%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.03%)</title><rect x="99.6824%" y="149" width="0.0334%" height="15" fill="rgb(225,139,18)" fg:x="5963" fg:w="2"/><text x="99.9324%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::apply (1,185 samples, 19.81%)</title><rect x="79.9398%" y="277" width="19.8094%" height="15" fill="rgb(230,137,11)" fg:x="4782" fg:w="1185"/><text x="80.1898%" y="287.50">speed-20cf170cf9340871`bft_json..</text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (26 samples, 0.43%)</title><rect x="99.3146%" y="261" width="0.4346%" height="15" fill="rgb(212,28,1)" fg:x="5941" fg:w="26"/><text x="99.5646%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (26 samples, 0.43%)</title><rect x="99.3146%" y="245" width="0.4346%" height="15" fill="rgb(248,164,17)" fg:x="5941" fg:w="26"/><text x="99.5646%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (26 samples, 0.43%)</title><rect x="99.3146%" y="229" width="0.4346%" height="15" fill="rgb(222,171,42)" fg:x="5941" fg:w="26"/><text x="99.5646%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (9 samples, 0.15%)</title><rect x="99.5988%" y="213" width="0.1505%" height="15" fill="rgb(243,84,45)" fg:x="5958" fg:w="9"/><text x="99.8488%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.15%)</title><rect x="99.5988%" y="197" width="0.1505%" height="15" fill="rgb(252,49,23)" fg:x="5958" fg:w="9"/><text x="99.8488%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.15%)</title><rect x="99.5988%" y="181" width="0.1505%" height="15" fill="rgb(215,19,7)" fg:x="5958" fg:w="9"/><text x="99.8488%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::raw::sse2::Group::match_byte (5 samples, 0.08%)</title><rect x="99.6657%" y="165" width="0.0836%" height="15" fill="rgb(238,81,41)" fg:x="5962" fg:w="5"/><text x="99.9157%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.03%)</title><rect x="99.7158%" y="149" width="0.0334%" height="15" fill="rgb(210,199,37)" fg:x="5965" fg:w="2"/><text x="99.9658%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.02%)</title><rect x="99.7325%" y="133" width="0.0167%" height="15" fill="rgb(244,192,49)" fg:x="5966" fg:w="1"/><text x="99.9825%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.7492%" y="165" width="0.0167%" height="15" fill="rgb(226,211,11)" fg:x="5967" fg:w="1"/><text x="99.9992%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="99.7492%" y="149" width="0.0167%" height="15" fill="rgb(236,162,54)" fg:x="5967" fg:w="1"/><text x="99.9992%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="99.7492%" y="133" width="0.0167%" height="15" fill="rgb(220,229,9)" fg:x="5967" fg:w="1"/><text x="99.9992%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::insert (2 samples, 0.03%)</title><rect x="99.7492%" y="277" width="0.0334%" height="15" fill="rgb(250,87,22)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::our_seq (2 samples, 0.03%)</title><rect x="99.7492%" y="261" width="0.0334%" height="15" fill="rgb(239,43,17)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.03%)</title><rect x="99.7492%" y="245" width="0.0334%" height="15" fill="rgb(231,177,25)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.03%)</title><rect x="99.7492%" y="229" width="0.0334%" height="15" fill="rgb(219,179,1)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.03%)</title><rect x="99.7492%" y="213" width="0.0334%" height="15" fill="rgb(238,219,53)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="99.7492%" y="197" width="0.0334%" height="15" fill="rgb(232,167,36)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="99.7492%" y="181" width="0.0334%" height="15" fill="rgb(244,19,51)" fg:x="5967" fg:w="2"/><text x="99.9992%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="99.7660%" y="165" width="0.0167%" height="15" fill="rgb(224,6,22)" fg:x="5968" fg:w="1"/><text x="100.0160%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.02%)</title><rect x="99.7660%" y="149" width="0.0167%" height="15" fill="rgb(224,145,5)" fg:x="5968" fg:w="1"/><text x="100.0160%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`core::hash::Hasher::write_u64 (1 samples, 0.02%)</title><rect x="99.7660%" y="133" width="0.0167%" height="15" fill="rgb(234,130,49)" fg:x="5968" fg:w="1"/><text x="100.0160%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="99.7660%" y="117" width="0.0167%" height="15" fill="rgb(254,6,2)" fg:x="5968" fg:w="1"/><text x="100.0160%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="99.7660%" y="101" width="0.0167%" height="15" fill="rgb(208,96,46)" fg:x="5968" fg:w="1"/><text x="100.0160%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.02%)</title><rect x="99.8328%" y="37" width="0.0167%" height="15" fill="rgb(239,3,39)" fg:x="5972" fg:w="1"/><text x="100.0828%" y="47.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="99.8328%" y="53" width="0.0502%" height="15" fill="rgb(233,210,1)" fg:x="5972" fg:w="3"/><text x="100.0828%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.03%)</title><rect x="99.8495%" y="37" width="0.0334%" height="15" fill="rgb(244,137,37)" fg:x="5973" fg:w="2"/><text x="100.0995%" y="47.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (5 samples, 0.08%)</title><rect x="99.8161%" y="69" width="0.0836%" height="15" fill="rgb(240,136,2)" fg:x="5971" fg:w="5"/><text x="100.0661%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect x="99.8830%" y="53" width="0.0167%" height="15" fill="rgb(239,18,37)" fg:x="5975" fg:w="1"/><text x="100.1330%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="99.8161%" y="85" width="0.1003%" height="15" fill="rgb(218,185,22)" fg:x="5971" fg:w="6"/><text x="100.0661%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.8997%" y="69" width="0.0167%" height="15" fill="rgb(225,218,4)" fg:x="5976" fg:w="1"/><text x="100.1497%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.02%)</title><rect x="99.9164%" y="85" width="0.0167%" height="15" fill="rgb(230,182,32)" fg:x="5977" fg:w="1"/><text x="100.1664%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.13%)</title><rect x="99.8161%" y="101" width="0.1337%" height="15" fill="rgb(242,56,43)" fg:x="5971" fg:w="8"/><text x="100.0661%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="99.9331%" y="85" width="0.0167%" height="15" fill="rgb(233,99,24)" fg:x="5978" fg:w="1"/><text x="100.1831%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::iter::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9331%" y="69" width="0.0167%" height="15" fill="rgb(234,209,42)" fg:x="5978" fg:w="1"/><text x="100.1831%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.9498%" y="101" width="0.0167%" height="15" fill="rgb(227,7,12)" fg:x="5979" fg:w="1"/><text x="100.1998%" y="111.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.9498%" y="85" width="0.0167%" height="15" fill="rgb(245,203,43)" fg:x="5979" fg:w="1"/><text x="100.1998%" y="95.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.9498%" y="69" width="0.0167%" height="15" fill="rgb(238,205,33)" fg:x="5979" fg:w="1"/><text x="100.1998%" y="79.50"></text></g><g><title>speed-20cf170cf9340871`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="99.9498%" y="53" width="0.0167%" height="15" fill="rgb(231,56,7)" fg:x="5979" fg:w="1"/><text x="100.1998%" y="63.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::all (12 samples, 0.20%)</title><rect x="99.7827%" y="277" width="0.2006%" height="15" fill="rgb(244,186,29)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.20%)</title><rect x="99.7827%" y="261" width="0.2006%" height="15" fill="rgb(234,111,31)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (12 samples, 0.20%)</title><rect x="99.7827%" y="245" width="0.2006%" height="15" fill="rgb(241,149,10)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}}::_{{closure}} (12 samples, 0.20%)</title><rect x="99.7827%" y="229" width="0.2006%" height="15" fill="rgb(249,206,44)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`bft_json_crdt::list_crdt::ListCRDT&lt;T&gt;::view (12 samples, 0.20%)</title><rect x="99.7827%" y="213" width="0.2006%" height="15" fill="rgb(251,153,30)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::iter::traits::iterator::Iterator::collect (12 samples, 0.20%)</title><rect x="99.7827%" y="197" width="0.2006%" height="15" fill="rgb(239,152,38)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12 samples, 0.20%)</title><rect x="99.7827%" y="181" width="0.2006%" height="15" fill="rgb(249,139,47)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.20%)</title><rect x="99.7827%" y="165" width="0.2006%" height="15" fill="rgb(244,64,35)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="175.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12 samples, 0.20%)</title><rect x="99.7827%" y="149" width="0.2006%" height="15" fill="rgb(216,46,15)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="159.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.20%)</title><rect x="99.7827%" y="133" width="0.2006%" height="15" fill="rgb(250,74,19)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="143.50"></text></g><g><title>speed-20cf170cf9340871`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (12 samples, 0.20%)</title><rect x="99.7827%" y="117" width="0.2006%" height="15" fill="rgb(249,42,33)" fg:x="5969" fg:w="12"/><text x="100.0327%" y="127.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="99.9666%" y="101" width="0.0167%" height="15" fill="rgb(242,149,17)" fg:x="5980" fg:w="1"/><text x="100.2166%" y="111.50"></text></g><g><title>all (5,982 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="5982"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,979 samples, 99.95%)</title><rect x="0.0502%" y="517" width="99.9498%" height="15" fill="rgb(220,130,37)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="527.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,979 samples, 99.95%)</title><rect x="0.0502%" y="501" width="99.9498%" height="15" fill="rgb(211,67,2)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="511.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>speed-20cf170cf9340871`std::sys::unix::thread::Thread::new::thread_start (5,979 samples, 99.95%)</title><rect x="0.0502%" y="485" width="99.9498%" height="15" fill="rgb(235,68,52)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="495.50">speed-20cf170cf9340871`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,979 samples, 99.95%)</title><rect x="0.0502%" y="469" width="99.9498%" height="15" fill="rgb(246,142,3)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="479.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-20cf170cf9340871`std::sys_common::backtrace::__rust_begin_short_backtrace (5,979 samples, 99.95%)</title><rect x="0.0502%" y="453" width="99.9498%" height="15" fill="rgb(241,25,7)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="463.50">speed-20cf170cf9340871`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`test::run_test::run_test_inner::_{{closure}} (5,979 samples, 99.95%)</title><rect x="0.0502%" y="437" width="99.9498%" height="15" fill="rgb(242,119,39)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="447.50">speed-20cf170cf9340871`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>speed-20cf170cf9340871`test::__rust_begin_short_backtrace (5,979 samples, 99.95%)</title><rect x="0.0502%" y="421" width="99.9498%" height="15" fill="rgb(241,98,45)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="431.50">speed-20cf170cf9340871`test::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,979 samples, 99.95%)</title><rect x="0.0502%" y="405" width="99.9498%" height="15" fill="rgb(254,28,30)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="415.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>speed-20cf170cf9340871`test::__rust_begin_short_backtrace (5,979 samples, 99.95%)</title><rect x="0.0502%" y="389" width="99.9498%" height="15" fill="rgb(241,142,54)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="399.50">speed-20cf170cf9340871`test::__rust_begin_short_backtrace</text></g><g><title>speed-20cf170cf9340871`core::ops::function::FnOnce::call_once (5,979 samples, 99.95%)</title><rect x="0.0502%" y="373" width="99.9498%" height="15" fill="rgb(222,85,15)" fg:x="3" fg:w="5979"/><text x="0.3002%" y="383.50">speed-20cf170cf9340871`core::ops::function::FnOnce::call_once</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}} (1,202 samples, 20.09%)</title><rect x="79.9064%" y="357" width="20.0936%" height="15" fill="rgb(210,85,47)" fg:x="4780" fg:w="1202"/><text x="80.1564%" y="367.50">speed-20cf170cf9340871`speed::be..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts (1,202 samples, 20.09%)</title><rect x="79.9064%" y="341" width="20.0936%" height="15" fill="rgb(224,206,25)" fg:x="4780" fg:w="1202"/><text x="80.1564%" y="351.50">speed-20cf170cf9340871`speed::be..</text></g><g><title>speed-20cf170cf9340871`test::bench::Bencher::iter (1,202 samples, 20.09%)</title><rect x="79.9064%" y="325" width="20.0936%" height="15" fill="rgb(243,201,19)" fg:x="4780" fg:w="1202"/><text x="80.1564%" y="335.50">speed-20cf170cf9340871`test::ben..</text></g><g><title>speed-20cf170cf9340871`test::bench::ns_iter_inner (1,202 samples, 20.09%)</title><rect x="79.9064%" y="309" width="20.0936%" height="15" fill="rgb(236,59,4)" fg:x="4780" fg:w="1202"/><text x="80.1564%" y="319.50">speed-20cf170cf9340871`test::ben..</text></g><g><title>speed-20cf170cf9340871`speed::bench_insert_many_agents_conflicts::_{{closure}} (1,202 samples, 20.09%)</title><rect x="79.9064%" y="293" width="20.0936%" height="15" fill="rgb(254,179,45)" fg:x="4780" fg:w="1202"/><text x="80.1564%" y="303.50">speed-20cf170cf9340871`speed::be..</text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9833%" y="277" width="0.0167%" height="15" fill="rgb(226,14,10)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="287.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9833%" y="261" width="0.0167%" height="15" fill="rgb(244,27,41)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="271.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;[bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;]&gt; (1 samples, 0.02%)</title><rect x="99.9833%" y="245" width="0.0167%" height="15" fill="rgb(235,35,32)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="255.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;bft_json_crdt::list_crdt::ListCRDT&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9833%" y="229" width="0.0167%" height="15" fill="rgb(218,68,31)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="239.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bft_json_crdt::op::Op&lt;usize&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9833%" y="213" width="0.0167%" height="15" fill="rgb(207,120,37)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="223.50"></text></g><g><title>speed-20cf170cf9340871`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bft_json_crdt::op::Op&lt;usize&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9833%" y="197" width="0.0167%" height="15" fill="rgb(227,98,0)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="207.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9833%" y="181" width="0.0167%" height="15" fill="rgb(207,7,3)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="191.50"></text></g><g><title>speed-20cf170cf9340871`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.9833%" y="165" width="0.0167%" height="15" fill="rgb(206,98,19)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="99.9833%" y="149" width="0.0167%" height="15" fill="rgb(217,5,26)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="99.9833%" y="133" width="0.0167%" height="15" fill="rgb(235,190,38)" fg:x="5981" fg:w="1"/><text x="100.2333%" y="143.50"></text></g></svg></svg>